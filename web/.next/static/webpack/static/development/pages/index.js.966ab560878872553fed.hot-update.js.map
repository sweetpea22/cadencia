{"version":3,"file":"static/webpack/static/development/pages/index.js.966ab560878872553fed.hot-update.js","sources":["webpack:///./components/balancer.js"],"sourcesContent":["import { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { Table, Tag } from \"./antd\";\n\nexport const BALANCER_QUERY = gql`\n  query {\n    pools(first: 10, orderBy: swapsCount, orderDirection: desc) {\n      id\n      totalWeight\n      tokens {\n        id\n        name\n        symbol\n        balance\n      }\n    }\n  }\n`;\n\nexport const balancerQueryVars = {\n  first: 10,\n};\n\nexport default function BalancerList() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    BALANCER_QUERY,\n    {\n      variables: balancerQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n      context: { clientName: \"balancer\" },\n    }\n  );\n\n  // const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  // const loadMorePosts = () => {\n  //   fetchMore({\n  //     variables: {\n  //       skip: pools.length,\n  //     },\n  //   });\n  // };\n\n  if (error) return <p> Error</p>;\n  if (loading && !loadingMorePosts) return <div>Loading</div>;\n\n  const { pools } = data;\n  // let poolsList = pools.map((pool, index) => {\n  //   let tokens = pool.tokens;\n  //   return (\n  //     <div key={index}>\n  //       <h1>Pool {index}</h1>\n  //       {tokens.map((token) => (\n  //         <p key={token.id}>{token.name}</p>\n  //       ))}\n  //     </div>\n  //   );\n  // });\n\n  const tokens = pools.map((pool) => {\n    let tokens = pool.tokens;\n    tokens.map((token) => {\n      return token.name;\n    });\n    return { pool: pool.id, tokens: pool.tokens };\n  });\n\n  \n  const tableData = [\n    {\n      minerId: \"t03984 - Genius Rig\",\n      rbsc: \"313.22TB\",\n      sectorQuality: \"43%\",\n      dealSuccessRate: \"90%\",\n    },\n    {\n      minerId: \"t0333\",\n      rbsc: \"50TB\",\n      sectorQuality: \"12%\",\n      dealSuccessRate: \"4%\",\n    },\n    {\n      minerId: \"t03984 - wethemboyz\",\n      rbsc: \"313.22TB\",\n      sectorQuality: \"43%\",\n      dealSuccessRate: \"90%\",\n    },\n    {\n      minerId: \"t03984 - hellokitty\",\n      rbsc: \"313.22TB\",\n      sectorQuality: \"43%\",\n      dealSuccessRate: \"90%\",\n    },\n    {\n      minerId: \"t03984 \",\n      rbsc: \"313.22TB\",\n      sectorQuality: \"43%\",\n      dealSuccessRate: \"90%\",\n    },\n    {\n      minerId: \"t03984 - apfelwein\",\n      rbsc: \"313.22TB\",\n      sectorQuality: \"43%\",\n      dealSuccessRate: \"90%\",\n    },\n  ];\n\n  const columns = [\n    {\n      title: \"ID\",\n      dataIndex: \"minerId\",\n    },\n    {\n      title: \"Token List\",\n      dataIndex: \"rbsc\",\n    },\n  ];\n\n  return (\n    <section>\n      <h1>What the biggest Balancer Pools are holding</h1>\n      {/* <>{poolsList}</> */}\n      <Table columns={columns} dataSource={tableData} />\n    </section>\n  );\n}\n\n// render: (tags) => (\n//   <>\n//     {tags.map((tag) => {\n//       let color = tag.length > 2 ? \"geekblue\" : \"green\";\n//       return (\n//         <Tag color={color} key={tag}>\n//           {tag}\n//         </Tag>\n//       );\n//     })}\n//   </>\n// ),\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAeA;AACA;AADA;AAIA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAHA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxBA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAQA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}