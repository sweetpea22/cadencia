{"version":3,"file":"static/webpack/static/development/pages/index.js.82ecf48fa2852335e9a2.hot-update.js","sources":["webpack:///./components/balancer.js"],"sourcesContent":["import { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport {\n  AreaChart,\n  Area,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n} from \"recharts\";\n\nexport const BALANCER_QUERY = gql`\n  query {\n    pools(first: 10, orderBy: totalSwapVolume, orderDirection: desc) {\n      totalWeight\n      tokens {\n        name\n        symbol\n        balance\n      }\n    }\n  }\n`;\n\nexport const balancerQueryVars = {\n  first: 10,\n};\n\nexport default function BalancerList() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    BALANCER_QUERY,\n    {\n      variables: balancerQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n      context: { dataSrc: \"kyber\" },\n    }\n  );\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const loadMorePosts = () => {\n    fetchMore({\n      variables: {\n        skip: pools.length,\n      },\n    });\n  };\n\n  if (error) return <p> Error</p>;\n  if (loading && !loadingMorePosts) return <div>Loading</div>;\n\n  const { pools } = data;\n  let poolsList = pools.map((pool, index) => {\n    let tokens = pool.tokens;\n    console.log(pool);\n    return (\n      <div>\n        <h1>Pool {index}</h1>\n        <ol>\n          {tokens.map((token) => {\n            <li>{token.name}</li>;\n          })}\n        </ol>\n      </div>\n    );\n  });\n\n  // const renderAreaChart = (\n  //   <AreaChart width={850} height={600} data={pools}>\n  //     <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"3 3\" />\n  //     <YAxis domain={[\"10000000\", \"dataMax\"]} dataKey=\"poolsCount\" />\n  //     <XAxis domain={[\"dataMin\", \"dataMax\"]} />\n  //     <Area\n  //       type=\"monotone\"\n  //       dataKey=\"poolsCount\"\n  //       stroke=\"#9A00D7\"\n  //       fill=\"#CF86FA\"\n  //       strokeWidth={2}\n  //     />\n  //     <Tooltip />\n  //   </AreaChart>\n  // );\n\n  return (\n    <section>\n      <h1>Balancer Pools</h1>\n      <>{poolsList}</>\n    </section>\n  );\n}\n\n// <li key={index}>\n//   Token Name: <strong>{token.name}</strong> Total Trade Volume:{\" \"}\n//   {token.totalTradeVolume}\n// </li>;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AASA;AAaA;AACA;AADA;AAIA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAHA;AAAA;AAAA;AAAA;AAAA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxBA;AA2BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;;;;A","sourceRoot":""}