{"version":3,"file":"static/webpack/static/development/pages/index.js.964dbb82851ce69cf37a.hot-update.js","sources":["webpack:///./components/uniswap.js"],"sourcesContent":["import { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\n\nexport const UNISWAP_QUERY = gql`\n  query {\n    tokens(\n      orderBy: txCount\n      orderDirection: desc\n      first: 9\n      where: { txCount_gt: 3000 }\n    ) {\n      id\n      symbol\n      txCount\n      tradeVolumeUSD\n    }\n  }\n`;\n\nexport const uniswapQueryVars = {\n  first: 10,\n};\n\nexport default function UniswapList() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    UNISWAP_QUERY,\n    {\n      variables: uniswapQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n      context: { clientName: \"uniswap\" },\n    }\n  );\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const loadMorePosts = () => {\n    fetchMore({\n      variables: {\n        skip: tokens.length,\n      },\n    });\n  };\n\n  if (error) return <p> Error</p>;\n  if (loading && !loadingMorePosts) return <div>Loading</div>;\n\n  const { tokens } = data;\n  let keys = [];\n\n  tokens.map((t, i) => keys.push(parseInt(t.tradeVolume)));\n  console.log(keys);\n  return (\n    <>\n      <div style={{ marginTop: \"2rem\" }}>\n        <h1 style={{ marginTop: \"1rem\" }}>Top Swapped Tokens (TxCount)</h1>\n        <BarChart\n          instanceId=\"uniswapChart\"\n          width={900}\n          height={600}\n          data={tokens}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 80,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"5 5\" />\n          <Tooltip />\n\n          <Bar dataKey=\"txCount\" fill=\"#7865cb\" fillOpacity=\"1\" />\n          <XAxis dataKey=\"symbol\" />\n          <YAxis\n            domain={[0, 2400000]}\n            dataKey=\"txCount\"\n            label={{\n              value: \"# all-time swaps\",\n              angle: -90,\n              position: \"left\",\n            }}\n            viewBox={{ x: -40 }}\n          />\n        </BarChart>\n      </div>\n    </>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAUA;AAgBA;AACA;AADA;AAIA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAHA;AAAA;AAAA;AAAA;AAAA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxBA;AA2BA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;;;;A","sourceRoot":""}