{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/studiopreza/Desktop/cadencia/cadencia/web/components/uniswap.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    tokens(\\n      orderBy: txCount\\n      orderDirection: desc\\n      first: 9\\n      where: { txCount_gt: 3000 }\\n    ) {\\n      id\\n      symbol\\n      txCount\\n      tradeVolumeUSD\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery } from \"@apollo/client\";\nimport { BarChart, Bar, XAxis, YAxis, Label, CartesianGrid, Tooltip } from \"recharts\";\nexport var UNISWAP_QUERY = gql(_templateObject());\nexport var uniswapQueryVars = {\n  first: 10\n};\nexport default function UniswapList() {\n  var _useQuery = useQuery(UNISWAP_QUERY, {\n    variables: uniswapQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true,\n    context: {\n      clientName: \"uniswap\"\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }\n  }, \" Error\");\n  if (loading && !loadingMorePosts) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 44\n    }\n  }, \"Loading\");\n  var tokens = data.tokens;\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      marginTop: \"2rem\",\n      marginLeft: \"5rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    style: {\n      marginTop: \"1rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"Top Swapped Tokens (TxCount)\"), __jsx(BarChart, {\n    instanceId: \"uniswapChart\",\n    width: 900,\n    height: 600,\n    data: tokens,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 50,\n      bottom: 50\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, __jsx(CartesianGrid, {\n    strokeDasharray: \"5 5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }), __jsx(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }), __jsx(Bar, {\n    dataKey: \"txCount\",\n    fill: \"#7865cb\",\n    fillOpacity: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }), __jsx(XAxis, {\n    dataKey: \"symbol\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }), __jsx(Label, {\n    value: \"token symbol\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }), __jsx(YAxis, {\n    domain: [0, 2400000],\n    dataKey: \"txCount\",\n    label: {\n      value: \"# all-time swaps\",\n      angle: -90,\n      position: \"left\",\n      offset: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/web/components/uniswap.js"],"names":["gql","useQuery","BarChart","Bar","XAxis","YAxis","Label","CartesianGrid","Tooltip","UNISWAP_QUERY","uniswapQueryVars","first","UniswapList","variables","notifyOnNetworkStatusChange","context","clientName","loading","error","data","fetchMore","networkStatus","loadingMorePosts","tokens","marginTop","marginLeft","top","right","left","bottom","value","angle","position","offset"],"mappings":"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","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Label,\n  CartesianGrid,\n  Tooltip,\n} from \"recharts\";\n\nexport const UNISWAP_QUERY = gql`\n  query {\n    tokens(\n      orderBy: txCount\n      orderDirection: desc\n      first: 9\n      where: { txCount_gt: 3000 }\n    ) {\n      id\n      symbol\n      txCount\n      tradeVolumeUSD\n    }\n  }\n`;\n\nexport const uniswapQueryVars = {\n  first: 10,\n};\n\nexport default function UniswapList() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    UNISWAP_QUERY,\n    {\n      variables: uniswapQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n      context: { clientName: \"uniswap\" },\n    }\n  );\n\n  if (error) return <p> Error</p>;\n  if (loading && !loadingMorePosts) return <div>Loading</div>;\n\n  const { tokens } = data;\n\n  return (\n    <>\n      <div style={{ marginTop: \"2rem\", marginLeft: \"5rem\" }}>\n        <h1 style={{ marginTop: \"1rem\" }}>Top Swapped Tokens (TxCount)</h1>\n        <BarChart\n          instanceId=\"uniswapChart\"\n          width={900}\n          height={600}\n          data={tokens}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 50,\n            bottom: 50,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"5 5\" />\n          <Tooltip />\n\n          <Bar dataKey=\"txCount\" fill=\"#7865cb\" fillOpacity=\"1\" />\n          <XAxis dataKey=\"symbol\" />\n          <Label value=\"token symbol\" />\n          <YAxis\n            domain={[0, 2400000]}\n            dataKey=\"txCount\"\n            label={{\n              value: \"# all-time swaps\",\n              angle: -90,\n              position: \"left\",\n              offset: 40,\n            }}\n          />\n        </BarChart>\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}