{"ast":null,"code":"var _jsxFileName = \"/Users/studiopreza/Desktop/cadencia/cadencia/web/components/balancer.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { Table, Tag } from \"./antd\";\nexport const BALANCER_QUERY = gql`\n  query {\n    pools(first: 10, orderBy: swapsCount, orderDirection: desc) {\n      id\n      totalWeight\n      tokens {\n        name\n        symbol\n      }\n    }\n  }\n`;\nexport const balancerQueryVars = {\n  first: 10\n};\nexport default function BalancerList() {\n  const {\n    loading,\n    error,\n    data,\n    fetchMore,\n    networkStatus\n  } = useQuery(BALANCER_QUERY, {\n    variables: balancerQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true,\n    context: {\n      clientName: \"balancer\"\n    }\n  }); // const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n  // const loadMorePosts = () => {\n  //   fetchMore({\n  //     variables: {\n  //       skip: pools.length,\n  //     },\n  //   });\n  // };\n\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }, \" Error\");\n  if (loading && !loadingMorePosts) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 44\n    }\n  }, \"Loading\");\n  const {\n    pools\n  } = data; // let poolsList = pools.map((pool, index) => {\n  //   let tokens = pool.tokens;\n  //   return (\n  //     <div key={index}>\n  //       <h1>Pool {index}</h1>\n  //       {tokens.map((token) => (\n  //         <p key={token.id}>{token.name}</p>\n  //       ))}\n  //     </div>\n  //   );\n  // });\n\n  const tokens = pools.map(pool => {\n    let tokens = pool.tokens;\n    tokens.map(token => {\n      return token.name;\n    });\n    return {\n      pool: pool.id,\n      tokens: pool.tokens\n    };\n  });\n  console.log(tokens);\n  const tableData = [{\n    minerId: \"t03984 - Genius Rig\",\n    rbsc: \"313.22TB\",\n    sectorQuality: \"43%\",\n    dealSuccessRate: \"90%\"\n  }, {\n    minerId: \"t0333\",\n    rbsc: \"50TB\",\n    sectorQuality: \"12%\",\n    dealSuccessRate: \"4%\"\n  }, {\n    minerId: \"t03984 - wethemboyz\",\n    rbsc: \"313.22TB\",\n    sectorQuality: \"43%\",\n    dealSuccessRate: \"90%\"\n  }, {\n    minerId: \"t03984 - hellokitty\",\n    rbsc: \"313.22TB\",\n    sectorQuality: \"43%\",\n    dealSuccessRate: \"90%\"\n  }, {\n    minerId: \"t03984 \",\n    rbsc: \"313.22TB\",\n    sectorQuality: \"43%\",\n    dealSuccessRate: \"90%\"\n  }, {\n    minerId: \"t03984 - apfelwein\",\n    rbsc: \"313.22TB\",\n    sectorQuality: \"43%\",\n    dealSuccessRate: \"90%\"\n  }];\n  const columns = [{\n    title: \"Pool Id\",\n    dataIndex: \"pool\",\n    render: pool => __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }, pool.substring(0, 7), \"...\", pool.substring(37, 42))\n  }, {\n    title: \"Holdings\",\n    dataIndex: \"tokens\",\n    render: tokens => __jsx(React.Fragment, null, tokens.map(t => {}))\n  }];\n  return __jsx(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, \"What the biggest Balancer Pools are holding\"), __jsx(Table, {\n    columns: columns,\n    dataSource: tokens,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }));\n} // render: (tags) => (\n//   <>\n//     {tags.map((tag) => {\n//       let color = tag.length > 2 ? \"geekblue\" : \"green\";\n//       return (\n//         <Tag color={color} key={tag}>\n//           {tag}\n//         </Tag>\n//       );\n//     })}\n//   </>\n// ),","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/web/components/balancer.js"],"names":["gql","useQuery","NetworkStatus","Table","Tag","BALANCER_QUERY","balancerQueryVars","first","BalancerList","loading","error","data","fetchMore","networkStatus","variables","notifyOnNetworkStatusChange","context","clientName","loadingMorePosts","pools","tokens","map","pool","token","name","id","console","log","tableData","minerId","rbsc","sectorQuality","dealSuccessRate","columns","title","dataIndex","render","substring","t"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,QAAd,EAAwBC,aAAxB,QAA6C,gBAA7C;AACA,SAASC,KAAT,EAAgBC,GAAhB,QAA2B,QAA3B;AAEA,OAAO,MAAMC,cAAc,GAAGL,GAAI;;;;;;;;;;;CAA3B;AAaP,OAAO,MAAMM,iBAAiB,GAAG;AAC/BC,EAAAA,KAAK,EAAE;AADwB,CAA1B;AAIP,eAAe,SAASC,YAAT,GAAwB;AACrC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,IAAlB;AAAwBC,IAAAA,SAAxB;AAAmCC,IAAAA;AAAnC,MAAqDZ,QAAQ,CACjEI,cADiE,EAEjE;AACES,IAAAA,SAAS,EAAER,iBADb;AAEE;AACA;AACA;AACAS,IAAAA,2BAA2B,EAAE,IAL/B;AAMEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd;AANX,GAFiE,CAAnE,CADqC,CAarC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIP,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACX,MAAID,OAAO,IAAI,CAACS,gBAAhB,EAAkC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AAElC,QAAM;AAAEC,IAAAA;AAAF,MAAYR,IAAlB,CA1BqC,CA2BrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMS,MAAM,GAAGD,KAAK,CAACE,GAAN,CAAWC,IAAD,IAAU;AACjC,QAAIF,MAAM,GAAGE,IAAI,CAACF,MAAlB;AACAA,IAAAA,MAAM,CAACC,GAAP,CAAYE,KAAD,IAAW;AACpB,aAAOA,KAAK,CAACC,IAAb;AACD,KAFD;AAGA,WAAO;AAAEF,MAAAA,IAAI,EAAEA,IAAI,CAACG,EAAb;AAAiBL,MAAAA,MAAM,EAAEE,IAAI,CAACF;AAA9B,KAAP;AACD,GANc,CAAf;AAQAM,EAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AACA,QAAMQ,SAAS,GAAG,CAChB;AACEC,IAAAA,OAAO,EAAE,qBADX;AAEEC,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,aAAa,EAAE,KAHjB;AAIEC,IAAAA,eAAe,EAAE;AAJnB,GADgB,EAOhB;AACEH,IAAAA,OAAO,EAAE,OADX;AAEEC,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,aAAa,EAAE,KAHjB;AAIEC,IAAAA,eAAe,EAAE;AAJnB,GAPgB,EAahB;AACEH,IAAAA,OAAO,EAAE,qBADX;AAEEC,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,aAAa,EAAE,KAHjB;AAIEC,IAAAA,eAAe,EAAE;AAJnB,GAbgB,EAmBhB;AACEH,IAAAA,OAAO,EAAE,qBADX;AAEEC,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,aAAa,EAAE,KAHjB;AAIEC,IAAAA,eAAe,EAAE;AAJnB,GAnBgB,EAyBhB;AACEH,IAAAA,OAAO,EAAE,SADX;AAEEC,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,aAAa,EAAE,KAHjB;AAIEC,IAAAA,eAAe,EAAE;AAJnB,GAzBgB,EA+BhB;AACEH,IAAAA,OAAO,EAAE,oBADX;AAEEC,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,aAAa,EAAE,KAHjB;AAIEC,IAAAA,eAAe,EAAE;AAJnB,GA/BgB,CAAlB;AAuCA,QAAMC,OAAO,GAAG,CACd;AACEC,IAAAA,KAAK,EAAE,SADT;AAEEC,IAAAA,SAAS,EAAE,MAFb;AAGEC,IAAAA,MAAM,EAAGd,IAAD,IACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,IAAI,CAACe,SAAL,CAAe,CAAf,EAAkB,CAAlB,CADH,SAC4Bf,IAAI,CAACe,SAAL,CAAe,EAAf,EAAmB,EAAnB,CAD5B;AAJJ,GADc,EAUd;AACEH,IAAAA,KAAK,EAAE,UADT;AAEEC,IAAAA,SAAS,EAAE,QAFb;AAGEC,IAAAA,MAAM,EAAGhB,MAAD,IACN,4BACCA,MAAM,CAACC,GAAP,CAAWiB,CAAC,IAAI,CAEhB,CAFA,CADD;AAJJ,GAVc,CAAhB;AAuBA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDADF,EAGE,MAAC,KAAD;AAAO,IAAA,OAAO,EAAEL,OAAhB;AAAyB,IAAA,UAAU,EAAEb,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { Table, Tag } from \"./antd\";\n\nexport const BALANCER_QUERY = gql`\n  query {\n    pools(first: 10, orderBy: swapsCount, orderDirection: desc) {\n      id\n      totalWeight\n      tokens {\n        name\n        symbol\n      }\n    }\n  }\n`;\n\nexport const balancerQueryVars = {\n  first: 10,\n};\n\nexport default function BalancerList() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    BALANCER_QUERY,\n    {\n      variables: balancerQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n      context: { clientName: \"balancer\" },\n    }\n  );\n\n  // const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  // const loadMorePosts = () => {\n  //   fetchMore({\n  //     variables: {\n  //       skip: pools.length,\n  //     },\n  //   });\n  // };\n\n  if (error) return <p> Error</p>;\n  if (loading && !loadingMorePosts) return <div>Loading</div>;\n\n  const { pools } = data;\n  // let poolsList = pools.map((pool, index) => {\n  //   let tokens = pool.tokens;\n  //   return (\n  //     <div key={index}>\n  //       <h1>Pool {index}</h1>\n  //       {tokens.map((token) => (\n  //         <p key={token.id}>{token.name}</p>\n  //       ))}\n  //     </div>\n  //   );\n  // });\n\n  const tokens = pools.map((pool) => {\n    let tokens = pool.tokens;\n    tokens.map((token) => {\n      return token.name;\n    });\n    return { pool: pool.id, tokens: pool.tokens };\n  });\n\n  console.log(tokens);\n  const tableData = [\n    {\n      minerId: \"t03984 - Genius Rig\",\n      rbsc: \"313.22TB\",\n      sectorQuality: \"43%\",\n      dealSuccessRate: \"90%\",\n    },\n    {\n      minerId: \"t0333\",\n      rbsc: \"50TB\",\n      sectorQuality: \"12%\",\n      dealSuccessRate: \"4%\",\n    },\n    {\n      minerId: \"t03984 - wethemboyz\",\n      rbsc: \"313.22TB\",\n      sectorQuality: \"43%\",\n      dealSuccessRate: \"90%\",\n    },\n    {\n      minerId: \"t03984 - hellokitty\",\n      rbsc: \"313.22TB\",\n      sectorQuality: \"43%\",\n      dealSuccessRate: \"90%\",\n    },\n    {\n      minerId: \"t03984 \",\n      rbsc: \"313.22TB\",\n      sectorQuality: \"43%\",\n      dealSuccessRate: \"90%\",\n    },\n    {\n      minerId: \"t03984 - apfelwein\",\n      rbsc: \"313.22TB\",\n      sectorQuality: \"43%\",\n      dealSuccessRate: \"90%\",\n    },\n  ];\n\n  const columns = [\n    {\n      title: \"Pool Id\",\n      dataIndex: \"pool\",\n      render: (pool) => (\n        <p>\n          {pool.substring(0, 7)}...{pool.substring(37, 42)}\n        </p>\n      ),\n    },\n    {\n      title: \"Holdings\", \n      dataIndex: \"tokens\",\n      render: (tokens) => (\n        <>\n        {tokens.map(t => {\n          \n        })}\n        </>\n      )\n    }\n  ];\n\n  return (\n    <section>\n      <h1>What the biggest Balancer Pools are holding</h1>\n      {/* <>{poolsList}</> */}\n      <Table columns={columns} dataSource={tokens} />\n    </section>\n  );\n}\n\n// render: (tags) => (\n//   <>\n//     {tags.map((tag) => {\n//       let color = tag.length > 2 ? \"geekblue\" : \"green\";\n//       return (\n//         <Tag color={color} key={tag}>\n//           {tag}\n//         </Tag>\n//       );\n//     })}\n//   </>\n// ),\n"]},"metadata":{},"sourceType":"module"}