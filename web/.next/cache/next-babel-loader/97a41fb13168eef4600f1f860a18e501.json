{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from \"react\";\nimport { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\nimport { concatPagination } from \"@apollo/client/utilities\";\nimport { setContext } from '@apollo/client/link/context';\nlet apolloClient;\nexport function createApolloClient(ctx) {\n  var _headers;\n\n  let headers = {};\n  let accessToken = \"\";\n\n  if (ctx) {\n    accessToken = getCookie('accessToken', ctx.req);\n\n    if (accessToken) {\n      headers = {\n        Authorization: accessToken\n      };\n    }\n  }\n\n  const authLink = setContext((req, {\n    headers\n  }) => {\n    // console.log(req, headers)\n    // get the authentication token from local storage if it exists\n    // return the headers to the context so httpLink can read them\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: accessToken ? `Bearer ${accessToken}` : \"\"\n      })\n    };\n  });\n  return new ApolloClient({\n    ssrMode: true,\n    link: new HttpLink({\n      uri: \"https://pipl.ir/v1/getPerson\",\n      // Server URL (must be absolute),\\\n      credentials: \"include\",\n      headers: {\n        cookie: (_headers = headers) === null || _headers === void 0 ? void 0 : _headers.cookie\n      } // Additional fetch() options like `credentials` or `headers`\n\n    }),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination()\n          }\n        }\n      }\n    })\n  });\n}\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/lib/apolloClient.js"],"names":["useMemo","ApolloClient","HttpLink","InMemoryCache","concatPagination","setContext","apolloClient","createApolloClient","ctx","headers","accessToken","getCookie","req","Authorization","authLink","authorization","ssrMode","link","uri","credentials","cookie","cache","typePolicies","Query","fields","allPosts","initializeApollo","initialState","_apolloClient","restore","useApollo","store"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,QAAsD,gBAAtD;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAAQC,UAAR,QAAyB,6BAAzB;AAEA,IAAIC,YAAJ;AAEA,OAAO,SAASC,kBAAT,CAA4BC,GAA5B,EAAiC;AAAA;;AACtC,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,WAAW,GAAC,EAAhB;;AACA,MAAIF,GAAJ,EAAS;AACHE,IAAAA,WAAW,GAAGC,SAAS,CAAC,aAAD,EAAeH,GAAG,CAACI,GAAnB,CAAvB;;AACA,QAAIF,WAAJ,EAAiB;AACbD,MAAAA,OAAO,GAAG;AACNI,QAAAA,aAAa,EAAEH;AADT,OAAV;AAGH;AACJ;;AAED,QAAMI,QAAQ,GAAGT,UAAU,CAAC,CAACO,GAAD,EAAM;AAACH,IAAAA;AAAD,GAAN,KAAoB;AAC9C;AACA;AACA;AACA,WAAO;AACHA,MAAAA,OAAO,oBACAA,OADA;AAEHM,QAAAA,aAAa,EAAEL,WAAW,GAAI,UAASA,WAAY,EAAzB,GAA6B;AAFpD;AADJ,KAAP;AAMH,GAV4B,CAA3B;AAWF,SAAO,IAAIT,YAAJ,CAAiB;AACtBe,IAAAA,OAAO,MADe;AAEtBC,IAAAA,IAAI,EAAE,IAAIf,QAAJ,CAAa;AACjBgB,MAAAA,GAAG,EAAE,8BADY;AACoB;AACrCC,MAAAA,WAAW,EAAE,SAFI;AAGjBV,MAAAA,OAAO,EAAE;AACPW,QAAAA,MAAM,cAAEX,OAAF,6CAAE,SAASW;AADV,OAHQ,CAKd;;AALc,KAAb,CAFgB;AAStBC,IAAAA,KAAK,EAAE,IAAIlB,aAAJ,CAAkB;AACvBmB,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE;AACNC,YAAAA,QAAQ,EAAErB,gBAAgB;AADpB;AADH;AADK;AADS,KAAlB;AATe,GAAjB,CAAP;AAmBD;AAED,OAAO,SAASsB,gBAAT,CAA0BC,YAAY,GAAG,IAAzC,EAA+C;AAAA;;AACpD,QAAMC,aAAa,qBAAGtB,YAAH,2DAAmBC,kBAAkB,EAAxD,CADoD,CAGpD;AACA;;;AACA,MAAIoB,YAAJ,EAAkB;AAChBC,IAAAA,aAAa,CAACP,KAAd,CAAoBQ,OAApB,CAA4BF,YAA5B;AACD,GAPmD,CAQpD;;;AACA,YAAmC,OAAOC,aAAP,CATiB,CAUpD;;AACA,MAAI,CAACtB,YAAL,EAAmBA,YAAY,GAAGsB,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASE,SAAT,CAAmBH,YAAnB,EAAiC;AACtC,QAAMI,KAAK,GAAG/B,OAAO,CAAC,MAAM0B,gBAAgB,CAACC,YAAD,CAAvB,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOI,KAAP;AACD","sourcesContent":["import { useMemo } from \"react\";\nimport { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\nimport { concatPagination } from \"@apollo/client/utilities\";\nimport {setContext} from '@apollo/client/link/context';\n\nlet apolloClient;\n\nexport function createApolloClient(ctx) {\n  let headers = {};\n  let accessToken=\"\"\n  if (ctx) {\n        accessToken = getCookie('accessToken',ctx.req);\n        if (accessToken) {\n            headers = {\n                Authorization: accessToken,\n            }\n        }\n    }\n\n    const authLink = setContext((req, {headers}) => {\n      // console.log(req, headers)\n      // get the authentication token from local storage if it exists\n      // return the headers to the context so httpLink can read them\n      return {\n          headers: {\n              ...headers,\n              authorization: accessToken ? `Bearer ${accessToken}` : \"\",\n          }\n      }\n  });\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n    link: new HttpLink({\n      uri: \"https://pipl.ir/v1/getPerson\", // Server URL (must be absolute),\\\n      credentials: \"include\",\n      headers: {\n        cookie: headers?.cookie,\n      }, // Additional fetch() options like `credentials` or `headers`\n    }),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination(),\n          },\n        },\n      },\n    }),\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? createApolloClient();\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === \"undefined\") return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}