{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/studiopreza/Desktop/cadencia/cadencia/web/components/uniswap.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    tokens(\\n      orderBy: name\\n      orderDirection: asc\\n      first: 1000\\n      where: { tradeVolume _gt: 1000 }\\n    ) {\\n      id\\n      symbol\\n      name\\n      tradeVolume\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nexport var UNISWAP_QUERY = gql(_templateObject());\nexport var uniswapQueryVars = {\n  first: 10\n};\nexport default function UniswapList() {\n  var _this = this;\n\n  var _useQuery = useQuery(UNISWAP_QUERY, {\n    variables: uniswapQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true,\n    context: {\n      clientName: \"uniswap\"\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  var loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  var loadMorePosts = function loadMorePosts() {\n    fetchMore({\n      variables: {\n        skip: tokens.length\n      }\n    });\n  };\n\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, \" Error\");\n  if (loading && !loadingMorePosts) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 44\n    }\n  }, \"Loading\");\n  var tokens = data.tokens;\n  return __jsx(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, \"Top Traded Uniswap Tokens\"), __jsx(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, tokens.map(function (token, index) {\n    return __jsx(\"li\", {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, \"Token Name: \", __jsx(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }\n    }, token.name), \" Total Trade Volume:\", \" \", token.tradeVolume);\n  })));\n}","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/web/components/uniswap.js"],"names":["gql","useQuery","NetworkStatus","UNISWAP_QUERY","uniswapQueryVars","first","UniswapList","variables","notifyOnNetworkStatusChange","context","clientName","loading","error","data","fetchMore","networkStatus","loadingMorePosts","loadMorePosts","skip","tokens","length","map","token","index","name","tradeVolume"],"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,GAAT,EAAcC,QAAd,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,OAAO,IAAMC,aAAa,GAAGH,GAAH,mBAAnB;AAgBP,OAAO,IAAMI,gBAAgB,GAAG;AAC9BC,EAAAA,KAAK,EAAE;AADuB,CAAzB;AAIP,eAAe,SAASC,WAAT,GAAuB;AAAA;;AAAA,kBACuBL,QAAQ,CACjEE,aADiE,EAEjE;AACEI,IAAAA,SAAS,EAAEH,gBADb;AAEE;AACA;AACA;AACAI,IAAAA,2BAA2B,EAAE,IAL/B;AAMEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd;AANX,GAFiE,CAD/B;AAAA,MAC5BC,OAD4B,aAC5BA,OAD4B;AAAA,MACnBC,KADmB,aACnBA,KADmB;AAAA,MACZC,IADY,aACZA,IADY;AAAA,MACNC,SADM,aACNA,SADM;AAAA,MACKC,aADL,aACKA,aADL;;AAapC,MAAMC,gBAAgB,GAAGD,aAAa,KAAKb,aAAa,CAACY,SAAzD;;AAEA,MAAMG,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BH,IAAAA,SAAS,CAAC;AACRP,MAAAA,SAAS,EAAE;AACTW,QAAAA,IAAI,EAAEC,MAAM,CAACC;AADJ;AADH,KAAD,CAAT;AAKD,GAND;;AAQA,MAAIR,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACX,MAAID,OAAO,IAAI,CAACK,gBAAhB,EAAkC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AAxBE,MA0B5BG,MA1B4B,GA0BjBN,IA1BiB,CA0B5BM,MA1B4B;AA4BpC,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,MAAM,CAACE,GAAP,CAAW,UAACC,KAAD,EAAQC,KAAR;AAAA,WACV;AAAI,MAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASD,KAAK,CAACE,IAAf,CADd,0BACgE,GADhE,EAEGF,KAAK,CAACG,WAFT,CADU;AAAA,GAAX,CADH,CAFF,CADF;AAaD","sourcesContent":["import { gql, useQuery, NetworkStatus } from \"@apollo/client\";\n\nexport const UNISWAP_QUERY = gql`\n  query {\n    tokens(\n      orderBy: name\n      orderDirection: asc\n      first: 1000\n      where: { tradeVolume _gt: 1000 }\n    ) {\n      id\n      symbol\n      name\n      tradeVolume\n    }\n  }\n`;\n\nexport const uniswapQueryVars = {\n  first: 10,\n};\n\nexport default function UniswapList() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    UNISWAP_QUERY,\n    {\n      variables: uniswapQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n      context: { clientName: \"uniswap\" },\n    }\n  );\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const loadMorePosts = () => {\n    fetchMore({\n      variables: {\n        skip: tokens.length,\n      },\n    });\n  };\n\n  if (error) return <p> Error</p>;\n  if (loading && !loadingMorePosts) return <div>Loading</div>;\n\n  const { tokens } = data;\n\n  return (\n    <section>\n      <h1>Top Traded Uniswap Tokens</h1>\n      <ol>\n        {tokens.map((token, index) => (\n          <li key={index}>\n            Token Name: <strong>{token.name}</strong> Total Trade Volume:{\" \"}\n            {token.tradeVolume}\n          </li>\n        ))}\n      </ol>\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}