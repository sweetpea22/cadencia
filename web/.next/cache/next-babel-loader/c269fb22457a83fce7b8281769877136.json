{"ast":null,"code":"var _jsxFileName = \"/Users/studiopreza/Desktop/cadencia/cadencia/components/MapComp.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Map, TileLayer, LayersControl, LayerGroup } from \"react-leaflet\";\nexport default function MapComp({\n  peersByStoragePower\n}) {\n  return __jsx(Map, {\n    center: [51.505, -0.09],\n    zoom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 5\n    }\n  }, __jsx(TileLayer, {\n    attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }\n  }), __jsx(LayersControl, {\n    position: \"topright\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }\n  }, Object.keys(nodesByClientTypes).map(clientType => __jsx(LayersControl.Overlay, {\n    key: clientType,\n    checked: true,\n    name: clientType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }\n  }, __jsx(LayerGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 15\n    }\n  }, nodesByClientTypes[clientType].map(node => __jsx(Marker, {\n    key: node._id,\n    position: [node.location.Lat, node.location.Lon],\n    icon: iconStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 19\n    }\n  }, __jsx(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 21\n    }\n  }, `Using ${node.client.type} v.${node.client.version} From ${node.city}`))))))));\n}","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/components/MapComp.js"],"names":["Map","TileLayer","LayersControl","LayerGroup","MapComp","peersByStoragePower","Object","keys","nodesByClientTypes","map","clientType","node","_id","location","Lat","Lon","iconStyle","client","type","version","city"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,aAAzB,EACEC,UADF,QACqB,eADrB;AAEA,eAAe,SAASC,OAAT,CAAiB;AAACC,EAAAA;AAAD,CAAjB,EAAwC;AACrD,SACE,MAAC,GAAD;AAAK,IAAA,MAAM,EAAE,CAAC,MAAD,EAAS,CAAC,IAAV,CAAb;AAA8B,IAAA,IAAI,EAAE,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AACE,IAAA,WAAW,EAAC,2EADd;AAEE,IAAA,GAAG,EAAC,oDAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAKE,MAAC,aAAD;AAAe,IAAA,QAAQ,EAAC,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKC,MAAM,CAACC,IAAP,CAAYC,kBAAZ,EAAgCC,GAAhC,CAAqCC,UAAD,IACnC,MAAC,aAAD,CAAe,OAAf;AAAuB,IAAA,GAAG,EAAEA,UAA5B;AAAwC,IAAA,OAAO,MAA/C;AAAgD,IAAA,IAAI,EAAEA,UAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,kBAAkB,CAACE,UAAD,CAAlB,CAA+BD,GAA/B,CAAoCE,IAAD,IAClC,MAAC,MAAD;AACE,IAAA,GAAG,EAAEA,IAAI,CAACC,GADZ;AAEE,IAAA,QAAQ,EAAE,CAACD,IAAI,CAACE,QAAL,CAAcC,GAAf,EAAoBH,IAAI,CAACE,QAAL,CAAcE,GAAlC,CAFZ;AAGE,IAAA,IAAI,EAAEC,SAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAW,SAAQL,IAAI,CAACM,MAAL,CAAYC,IAAK,MAAKP,IAAI,CAACM,MAAL,CAAYE,OAAQ,SAAQR,IAAI,CAACS,IAAK,EAA/E,CALF,CADD,CADH,CADF,CADD,CADL,CALF,CADF;AAyBD","sourcesContent":["import { Map, TileLayer, LayersControl,\n  LayerGroup, } from \"react-leaflet\";\nexport default function MapComp({peersByStoragePower}) {\n  return (\n    <Map center={[51.505, -0.09]} zoom={2}>\n      <TileLayer\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      <LayersControl position=\"topright\">\n          {Object.keys(nodesByClientTypes).map((clientType) => (\n            <LayersControl.Overlay key={clientType} checked name={clientType}>\n              <LayerGroup>\n                {nodesByClientTypes[clientType].map((node) => (\n                  <Marker\n                    key={node._id}\n                    position={[node.location.Lat, node.location.Lon]}\n                    icon={iconStyle}\n                  >\n                    <Tooltip>{`Using ${node.client.type} v.${node.client.version} From ${node.city}`}</Tooltip>\n                  </Marker>\n                ))}\n              </LayerGroup>\n            </LayersControl.Overlay>\n          ))}\n        </LayersControl>\n    </Map>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}