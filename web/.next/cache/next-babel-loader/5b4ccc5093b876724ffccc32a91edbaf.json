{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/studiopreza/Desktop/cadencia/cadencia/web/components/uniswap.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    tokens(\\n      orderBy: txCount\\n      orderDirection: desc\\n      first: 1000\\n      where: { txCount_gt: 3000 }\\n    ) {\\n      id\\n      symbol\\n      name\\n      tradeVolume\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from \"recharts\";\nexport var UNISWAP_QUERY = gql(_templateObject());\nexport var uniswapQueryVars = {\n  first: 10\n};\nexport default function UniswapList() {\n  var _this = this;\n\n  var _useQuery = useQuery(UNISWAP_QUERY, {\n    variables: uniswapQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true,\n    context: {\n      clientName: \"uniswap\"\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  var loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  var loadMorePosts = function loadMorePosts() {\n    fetchMore({\n      variables: {\n        skip: tokens.length\n      }\n    });\n  };\n\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }, \" Error\");\n  if (loading && !loadingMorePosts) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 44\n    }\n  }, \"Loading\");\n  var tokens = data.tokens;\n  var tokenNameMap = tokens.map(function (t) {\n    return t.name;\n  });\n  return __jsx(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, \"Most Swapped Tokens on Uniswap\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, __jsx(BarChart, {\n    width: 900,\n    height: 300,\n    data: tokens,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, __jsx(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }), __jsx(XAxis, {\n    dataKey: tokens,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }), __jsx(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }), tokens.map(function (token) {\n    return __jsx(React.Fragment, null, __jsx(Bar, {\n      key: token.id,\n      dataKey: token.name,\n      fill: \"#82ca9d\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    }), __jsx(Tooltip, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }\n    }));\n  }))), __jsx(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, tokens.map(function (token, index) {\n    return __jsx(\"li\", {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, \"Token Name: \", __jsx(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 25\n      }\n    }, token.name), \" Total Trade Volume:\", \" \", token.tradeVolume);\n  })));\n}","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/web/components/uniswap.js"],"names":["gql","useQuery","NetworkStatus","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","UNISWAP_QUERY","uniswapQueryVars","first","UniswapList","variables","notifyOnNetworkStatusChange","context","clientName","loading","error","data","fetchMore","networkStatus","loadingMorePosts","loadMorePosts","skip","tokens","length","tokenNameMap","map","t","name","top","right","left","bottom","token","id","index","tradeVolume"],"mappings":"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","sourcesContent":["import { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\n\nexport const UNISWAP_QUERY = gql`\n  query {\n    tokens(\n      orderBy: txCount\n      orderDirection: desc\n      first: 1000\n      where: { txCount_gt: 3000 }\n    ) {\n      id\n      symbol\n      name\n      tradeVolume\n    }\n  }\n`;\n\nexport const uniswapQueryVars = {\n  first: 10,\n};\n\nexport default function UniswapList() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    UNISWAP_QUERY,\n    {\n      variables: uniswapQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n      context: { clientName: \"uniswap\" },\n    }\n  );\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const loadMorePosts = () => {\n    fetchMore({\n      variables: {\n        skip: tokens.length,\n      },\n    });\n  };\n\n  if (error) return <p> Error</p>;\n  if (loading && !loadingMorePosts) return <div>Loading</div>;\n\n  const { tokens } = data;\n\n  let tokenNameMap = tokens.map((t) => t.name);\n  return (\n    <section>\n      <h1>Most Swapped Tokens on Uniswap</h1>\n      <div>\n        <BarChart\n          width={900}\n          height={300}\n          data={tokens}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey={tokens} />\n          <YAxis />\n          {tokens.map((token) => (\n            <>\n              <Bar key={token.id} dataKey={token.name} fill=\"#82ca9d\" />\n              <Tooltip />\n            </>\n          ))}\n        </BarChart>\n      </div>\n      <ol>\n        {tokens.map((token, index) => (\n          <li key={index}>\n            Token Name: <strong>{token.name}</strong> Total Trade Volume:{\" \"}\n            {token.tradeVolume}\n          </li>\n        ))}\n      </ol>\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}