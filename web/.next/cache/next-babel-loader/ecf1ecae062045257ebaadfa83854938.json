{"ast":null,"code":"var _jsxFileName = \"/Users/studiopreza/Desktop/cadencia/cadencia/web/components/uniswap.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from \"recharts\";\nexport const UNISWAP_QUERY = gql`\n  query {\n    tokens(\n      orderBy: txCount\n      orderDirection: desc\n      first: 4\n      where: { txCount_gt: 3000 }\n    ) {\n      id\n      symbol\n      name\n      tradeVolume\n    }\n  }\n`;\nexport const uniswapQueryVars = {\n  first: 10\n};\nexport default function UniswapList() {\n  const {\n    loading,\n    error,\n    data,\n    fetchMore,\n    networkStatus\n  } = useQuery(UNISWAP_QUERY, {\n    variables: uniswapQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true,\n    context: {\n      clientName: \"uniswap\"\n    }\n  });\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const loadMorePosts = () => {\n    fetchMore({\n      variables: {\n        skip: tokens.length\n      }\n    });\n  };\n\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }, \" Error\");\n  if (loading && !loadingMorePosts) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 44\n    }\n  }, \"Loading\");\n  const {\n    tokens\n  } = data;\n  let keys = [];\n  tokens.map((t, i) => keys.push(parseInt(t.tradeVolume)));\n  console.log(keys);\n  return __jsx(BarChart, {\n    instanceId: \"uniswapChart\",\n    width: 900,\n    height: 800,\n    data: tokens,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, __jsx(CartesianGrid, {\n    strokeDasharray: \"5 5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), __jsx(XAxis, {\n    dataKey: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), __jsx(YAxis, {\n    domain: [\"dataMin\", \"dataMax\"],\n    dataKey: \"tradeVolume\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }), __jsx(Bar, {\n    dataKey: \"tradeVolume\",\n    fill: \"#7865cb\",\n    fillOpacity: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }));\n} //     <section>\n//       <h1>Most Swapped Tokens on Uniswap</h1>\n//   <ol>\n//     {tokens.map((token, index) => (\n//       <li key={index}>\n//         Token Name: <strong>{token.name}</strong> Total Trade Volume:{\" \"}\n//         {token.tradeVolume}\n//       </li>\n//     ))}\n//   </ol>\n// </section>","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/web/components/uniswap.js"],"names":["gql","useQuery","NetworkStatus","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","UNISWAP_QUERY","uniswapQueryVars","first","UniswapList","loading","error","data","fetchMore","networkStatus","variables","notifyOnNetworkStatusChange","context","clientName","loadingMorePosts","loadMorePosts","skip","tokens","length","keys","map","t","i","push","parseInt","tradeVolume","console","log","top","right","left","bottom"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,QAAd,EAAwBC,aAAxB,QAA6C,gBAA7C;AACA,SACEC,QADF,EAEEC,GAFF,EAGEC,KAHF,EAIEC,KAJF,EAKEC,aALF,EAMEC,OANF,EAOEC,MAPF,QAQO,UARP;AAUA,OAAO,MAAMC,aAAa,GAAGV,GAAI;;;;;;;;;;;;;;CAA1B;AAgBP,OAAO,MAAMW,gBAAgB,GAAG;AAC9BC,EAAAA,KAAK,EAAE;AADuB,CAAzB;AAIP,eAAe,SAASC,WAAT,GAAuB;AACpC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,IAAlB;AAAwBC,IAAAA,SAAxB;AAAmCC,IAAAA;AAAnC,MAAqDjB,QAAQ,CACjES,aADiE,EAEjE;AACES,IAAAA,SAAS,EAAER,gBADb;AAEE;AACA;AACA;AACAS,IAAAA,2BAA2B,EAAE,IAL/B;AAMEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd;AANX,GAFiE,CAAnE;AAYA,QAAMC,gBAAgB,GAAGL,aAAa,KAAKhB,aAAa,CAACe,SAAzD;;AAEA,QAAMO,aAAa,GAAG,MAAM;AAC1BP,IAAAA,SAAS,CAAC;AACRE,MAAAA,SAAS,EAAE;AACTM,QAAAA,IAAI,EAAEC,MAAM,CAACC;AADJ;AADH,KAAD,CAAT;AAKD,GAND;;AAQA,MAAIZ,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACX,MAAID,OAAO,IAAI,CAACS,gBAAhB,EAAkC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AAElC,QAAM;AAAEG,IAAAA;AAAF,MAAaV,IAAnB;AACA,MAAIY,IAAI,GAAG,EAAX;AAEAF,EAAAA,MAAM,CAACG,GAAP,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAUH,IAAI,CAACI,IAAL,CAAUC,QAAQ,CAACH,CAAC,CAACI,WAAH,CAAlB,CAArB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACA,SACE,MAAC,QAAD;AACE,IAAA,UAAU,EAAC,cADb;AAEE,IAAA,KAAK,EAAE,GAFT;AAGE,IAAA,MAAM,EAAE,GAHV;AAIE,IAAA,IAAI,EAAEF,MAJR;AAKE,IAAA,MAAM,EAAE;AACNW,MAAAA,GAAG,EAAE,CADC;AAENC,MAAAA,KAAK,EAAE,EAFD;AAGNC,MAAAA,IAAI,EAAE,EAHA;AAINC,MAAAA,MAAM,EAAE;AAJF,KALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYE,MAAC,aAAD;AAAe,IAAA,eAAe,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,EAaE,MAAC,KAAD;AAAO,IAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,EAcE,MAAC,KAAD;AAAO,IAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ,CAAf;AAAuC,IAAA,OAAO,EAAC,aAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,EAgBE,MAAC,GAAD;AAAK,IAAA,OAAO,EAAC,aAAb;AAA2B,IAAA,IAAI,EAAC,SAAhC;AAA0C,IAAA,WAAW,EAAC,GAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,CADF;AAoBD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\n\nexport const UNISWAP_QUERY = gql`\n  query {\n    tokens(\n      orderBy: txCount\n      orderDirection: desc\n      first: 4\n      where: { txCount_gt: 3000 }\n    ) {\n      id\n      symbol\n      name\n      tradeVolume\n    }\n  }\n`;\n\nexport const uniswapQueryVars = {\n  first: 10,\n};\n\nexport default function UniswapList() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    UNISWAP_QUERY,\n    {\n      variables: uniswapQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n      context: { clientName: \"uniswap\" },\n    }\n  );\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const loadMorePosts = () => {\n    fetchMore({\n      variables: {\n        skip: tokens.length,\n      },\n    });\n  };\n\n  if (error) return <p> Error</p>;\n  if (loading && !loadingMorePosts) return <div>Loading</div>;\n\n  const { tokens } = data;\n  let keys = [];\n\n  tokens.map((t, i) => keys.push(parseInt(t.tradeVolume)));\n  console.log(keys);\n  return (\n    <BarChart\n      instanceId=\"uniswapChart\"\n      width={900}\n      height={800}\n      data={tokens}\n      margin={{\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5,\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"5 5\" />\n      <XAxis dataKey=\"name\" />\n      <YAxis domain={[\"dataMin\", \"dataMax\"]} dataKey=\"tradeVolume\" />\n\n      <Bar dataKey=\"tradeVolume\" fill=\"#7865cb\" fillOpacity=\"1\" />\n    </BarChart>\n  );\n}\n\n//     <section>\n//       <h1>Most Swapped Tokens on Uniswap</h1>\n//   <ol>\n//     {tokens.map((token, index) => (\n//       <li key={index}>\n//         Token Name: <strong>{token.name}</strong> Total Trade Volume:{\" \"}\n//         {token.tradeVolume}\n//       </li>\n//     ))}\n//   </ol>\n// </section>\n"]},"metadata":{},"sourceType":"module"}