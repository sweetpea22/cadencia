{"ast":null,"code":"var _jsxFileName = \"/Users/studiopreza/Desktop/cadencia/cadencia/web/components/balancer.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { AreaChart, Area, CartesianGrid, XAxis, YAxis, Tooltip } from \"recharts\";\nexport const BALANCER_QUERY = gql`\n  query {\n    networkTradeVolumes(first: 5) {\n    id\n    token {\n      name\n    }\n    network {\n      id\n    }\n    rawTotalVolume\n    rawAmountSold\n    rawAmountBought\n    actualTotalVolume\n    actualAmountSold\n    actualAmountBought\n  }\n  }\n`;\nexport const balancerQueryVars = {\n  first: 10\n};\nexport default function BalancerList() {\n  const {\n    loading,\n    error,\n    data,\n    fetchMore,\n    networkStatus\n  } = useQuery(BALANCER_QUERY, {\n    variables: balancerQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true,\n    context: {\n      dataSrc: \"kyber\"\n    }\n  });\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const loadMorePosts = () => {\n    fetchMore({\n      variables: {\n        skip: pools.length\n      }\n    });\n  };\n\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }, \" Error\");\n  if (loading && !loadingMorePosts) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 44\n    }\n  }, \"Loading\");\n  const {\n    networkTradeVolumes\n  } = data; // const renderAreaChart = (\n  //   <AreaChart width={850} height={600} data={tokens}>\n  //     <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"3 3\" />\n  //     <YAxis domain={[\"10000000\", \"dataMax\"]} dataKey=\"tokensCount\" />\n  //     <XAxis domain={[\"dataMin\", \"dataMax\"]} />\n  //     <Area\n  //       type=\"monotone\"\n  //       dataKey=\"tokensCount\"\n  //       stroke=\"#9A00D7\"\n  //       fill=\"#CF86FA\"\n  //       strokeWidth={2}\n  //     />\n  //     <Tooltip />\n  //   </AreaChart>\n  // );\n\n  return __jsx(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, \"Kyber tokens\"), __jsx(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, totalTradeVolumes.map((token, index) => __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, token.name))));\n} // <li key={index}>\n//   Token Name: <strong>{token.name}</strong> Total Trade Volume:{\" \"}\n//   {token.totalTradeVolume}\n// </li>;","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/web/components/balancer.js"],"names":["gql","useQuery","NetworkStatus","AreaChart","Area","CartesianGrid","XAxis","YAxis","Tooltip","BALANCER_QUERY","balancerQueryVars","first","BalancerList","loading","error","data","fetchMore","networkStatus","variables","notifyOnNetworkStatusChange","context","dataSrc","loadingMorePosts","loadMorePosts","skip","pools","length","networkTradeVolumes","totalTradeVolumes","map","token","index","name"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,QAAd,EAAwBC,aAAxB,QAA6C,gBAA7C;AACA,SACEC,SADF,EAEEC,IAFF,EAGEC,aAHF,EAIEC,KAJF,EAKEC,KALF,EAMEC,OANF,QAOO,UAPP;AASA,OAAO,MAAMC,cAAc,GAAGT,GAAI;;;;;;;;;;;;;;;;;;CAA3B;AAoBP,OAAO,MAAMU,iBAAiB,GAAG;AAC/BC,EAAAA,KAAK,EAAE;AADwB,CAA1B;AAIP,eAAe,SAASC,YAAT,GAAwB;AACrC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,IAAlB;AAAwBC,IAAAA,SAAxB;AAAmCC,IAAAA;AAAnC,MAAqDhB,QAAQ,CACjEQ,cADiE,EAEjE;AACES,IAAAA,SAAS,EAAER,iBADb;AAEE;AACA;AACA;AACAS,IAAAA,2BAA2B,EAAE,IAL/B;AAMEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX;AANX,GAFiE,CAAnE;AAYA,QAAMC,gBAAgB,GAAGL,aAAa,KAAKf,aAAa,CAACc,SAAzD;;AAEA,QAAMO,aAAa,GAAG,MAAM;AAC1BP,IAAAA,SAAS,CAAC;AACRE,MAAAA,SAAS,EAAE;AACTM,QAAAA,IAAI,EAAEC,KAAK,CAACC;AADH;AADH,KAAD,CAAT;AAKD,GAND;;AAQA,MAAIZ,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACX,MAAID,OAAO,IAAI,CAACS,gBAAhB,EAAkC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AAElC,QAAM;AAAEK,IAAAA;AAAF,MAA0BZ,IAAhC,CA1BqC,CA4BrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGa,iBAAiB,CAACC,GAAlB,CAAsB,CAACC,KAAD,EAAQC,KAAR,KACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,KAAK,CAACE,IAAX,CADD,CADH,CAFF,CADF;AAUD,C,CAED;AACA;AACA;AACA","sourcesContent":["import { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport {\n  AreaChart,\n  Area,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n} from \"recharts\";\n\nexport const BALANCER_QUERY = gql`\n  query {\n    networkTradeVolumes(first: 5) {\n    id\n    token {\n      name\n    }\n    network {\n      id\n    }\n    rawTotalVolume\n    rawAmountSold\n    rawAmountBought\n    actualTotalVolume\n    actualAmountSold\n    actualAmountBought\n  }\n  }\n`;\n\nexport const balancerQueryVars = {\n  first: 10,\n};\n\nexport default function BalancerList() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    BALANCER_QUERY,\n    {\n      variables: balancerQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n      context: { dataSrc: \"kyber\" },\n    }\n  );\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const loadMorePosts = () => {\n    fetchMore({\n      variables: {\n        skip: pools.length,\n      },\n    });\n  };\n\n  if (error) return <p> Error</p>;\n  if (loading && !loadingMorePosts) return <div>Loading</div>;\n\n  const { networkTradeVolumes } = data;\n\n  // const renderAreaChart = (\n  //   <AreaChart width={850} height={600} data={tokens}>\n  //     <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"3 3\" />\n  //     <YAxis domain={[\"10000000\", \"dataMax\"]} dataKey=\"tokensCount\" />\n  //     <XAxis domain={[\"dataMin\", \"dataMax\"]} />\n  //     <Area\n  //       type=\"monotone\"\n  //       dataKey=\"tokensCount\"\n  //       stroke=\"#9A00D7\"\n  //       fill=\"#CF86FA\"\n  //       strokeWidth={2}\n  //     />\n  //     <Tooltip />\n  //   </AreaChart>\n  // );\n\n  return (\n    <section>\n      <h1>Kyber tokens</h1>\n      <ol>\n        {totalTradeVolumes.map((token, index) => (\n          <li>{token.name}</li>\n        ))}\n      </ol>\n    </section>\n  );\n}\n\n// <li key={index}>\n//   Token Name: <strong>{token.name}</strong> Total Trade Volume:{\" \"}\n//   {token.totalTradeVolume}\n// </li>;\n"]},"metadata":{},"sourceType":"module"}