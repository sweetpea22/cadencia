{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/studiopreza/Desktop/cadencia/cadencia/web/components/balancer.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    pools(first: 10, orderBy: swapsCount, orderDirection: desc) {\\n      id\\n      totalWeight\\n      tokens {\\n        id\\n        name\\n        symbol\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { Table, Tag } from \"./antd\";\nexport var BALANCER_QUERY = gql(_templateObject());\nexport var balancerQueryVars = {\n  first: 10\n};\nexport default function BalancerList() {\n  var _this = this;\n\n  var _useQuery = useQuery(BALANCER_QUERY, {\n    variables: balancerQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true,\n    context: {\n      clientName: \"balancer\"\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus; // const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n  // const loadMorePosts = () => {\n  //   fetchMore({\n  //     variables: {\n  //       skip: pools.length,\n  //     },\n  //   });\n  // };\n\n\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }\n  }, \" Error\");\n  if (loading && !loadingMorePosts) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 44\n    }\n  }, \"Loading\");\n  var pools = data.pools;\n  var tokens = pools.map(function (pool) {\n    var tokens = pool.tokens;\n    tokens.map(function (token) {\n      return token.name;\n    });\n    return {\n      pool: pool.id,\n      tokens: pool.tokens\n    };\n  });\n  var columns = [{\n    title: \"Pool Id\",\n    dataIndex: \"pool\",\n    render: function render(pool) {\n      return __jsx(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }\n      }, pool.substring(0, 7), \"...\", pool.substring(37, 42));\n    }\n  }, {\n    title: \"Holdings\",\n    dataIndex: \"tokens\",\n    render: function render(tokens) {\n      return __jsx(React.Fragment, null, tokens.map(function (t) {\n        var color = t.length % 2 < 1 ? \"volcano\" : \"geekblue\";\n        if (t.symbol === \"WETH\") return __jsx(Tag, {\n          color: color,\n          key: t.id,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }\n        }, t.symbol);\n      }));\n    }\n  }];\n  return __jsx(\"section\", {\n    style: {\n      marginTop: \"2rem\",\n      marginLeft: \"2rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, \"What the biggest Balancer Pools are holding\"), __jsx(Table, {\n    columns: columns,\n    dataSource: tokens,\n    pagination: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/web/components/balancer.js"],"names":["gql","useQuery","NetworkStatus","Table","Tag","BALANCER_QUERY","balancerQueryVars","first","BalancerList","variables","notifyOnNetworkStatusChange","context","clientName","loading","error","data","fetchMore","networkStatus","loadingMorePosts","pools","tokens","map","pool","token","name","id","columns","title","dataIndex","render","substring","t","color","length","symbol","marginTop","marginLeft"],"mappings":"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","sourcesContent":["import { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { Table, Tag } from \"./antd\";\n\nexport const BALANCER_QUERY = gql`\n  query {\n    pools(first: 10, orderBy: swapsCount, orderDirection: desc) {\n      id\n      totalWeight\n      tokens {\n        id\n        name\n        symbol\n      }\n    }\n  }\n`;\n\nexport const balancerQueryVars = {\n  first: 10,\n};\n\nexport default function BalancerList() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    BALANCER_QUERY,\n    {\n      variables: balancerQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n      context: { clientName: \"balancer\" },\n    }\n  );\n\n  // const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  // const loadMorePosts = () => {\n  //   fetchMore({\n  //     variables: {\n  //       skip: pools.length,\n  //     },\n  //   });\n  // };\n\n  if (error) return <p> Error</p>;\n  if (loading && !loadingMorePosts) return <div>Loading</div>;\n\n  const { pools } = data;\n\n  const tokens = pools.map((pool) => {\n    let tokens = pool.tokens;\n    tokens.map((token) => {\n      return token.name;\n    });\n    return { pool: pool.id, tokens: pool.tokens };\n  });\n\n  const columns = [\n    {\n      title: \"Pool Id\",\n      dataIndex: \"pool\",\n      render: (pool) => (\n        <p>\n          {pool.substring(0, 7)}...{pool.substring(37, 42)}\n        </p>\n      ),\n    },\n    {\n      title: \"Holdings\",\n      dataIndex: \"tokens\",\n      render: (tokens) => (\n        <>\n          {tokens.map((t) => {\n            let color = t.length % 2 < 1 ? \"volcano\" : \"geekblue\";\n            if (t.symbol === \"WETH\")\n            return (\n              <Tag color={color} key={t.id}>\n                {t.symbol}\n              </Tag>\n            );\n          })}\n        </>\n      ),\n    },\n  ];\n\n  return (\n    <section style={{ marginTop: \"2rem\", marginLeft: \"2rem\" }}>\n      <h1>What the biggest Balancer Pools are holding</h1>\n\n      <Table columns={columns} dataSource={tokens} pagination={false} />\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}