{"ast":null,"code":"import { useMemo } from \"react\";\nimport { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\nimport { concatPagination } from \"@apollo/client/utilities\";\nimport fetch from \"cross-fetch\";\nvar apolloClient;\nexport function createApolloClient() {\n  return new ApolloClient({\n    ssrMode: false,\n    link: new HttpLink({\n      uri: \"https://api.coinpaprika.com/v1/coins/btc-bitcoin\",\n      // Server URL (must be absolute)\n      fetch: fetch // Additional fetch() options like `credentials` or `headers`\n\n    }),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination()\n          }\n        }\n      }\n    })\n  });\n}\nexport function initializeApollo() {\n  var _apolloClient2;\n\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (false) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  var store = useMemo(function () {\n    return initializeApollo(initialState);\n  }, [initialState]);\n  return store;\n}","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/lib/apolloClient.js"],"names":["useMemo","ApolloClient","HttpLink","InMemoryCache","concatPagination","fetch","apolloClient","createApolloClient","ssrMode","link","uri","cache","typePolicies","Query","fields","allPosts","initializeApollo","initialState","_apolloClient","restore","useApollo","store"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,QAAsD,gBAAtD;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,IAAIC,YAAJ;AAEA,OAAO,SAASC,kBAAT,GAA8B;AACnC,SAAO,IAAIN,YAAJ,CAAiB;AACtBO,IAAAA,OAAO,OADe;AAEtBC,IAAAA,IAAI,EAAE,IAAIP,QAAJ,CAAa;AACjBQ,MAAAA,GAAG,EAAE,kDADY;AACwC;AACzDL,MAAAA,KAAK,EAALA,KAFiB,CAEX;;AAFW,KAAb,CAFgB;AAMtBM,IAAAA,KAAK,EAAE,IAAIR,aAAJ,CAAkB;AACvBS,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE;AACNC,YAAAA,QAAQ,EAAEX,gBAAgB;AADpB;AADH;AADK;AADS,KAAlB;AANe,GAAjB,CAAP;AAgBD;AAED,OAAO,SAASY,gBAAT,GAA+C;AAAA;;AAAA,MAArBC,YAAqB,uEAAN,IAAM;;AACpD,MAAMC,aAAa,qBAAGZ,YAAH,2DAAmBC,kBAAkB,EAAxD,CADoD,CAGpD;AACA;;;AACA,MAAIU,YAAJ,EAAkB;AAChBC,IAAAA,aAAa,CAACP,KAAd,CAAoBQ,OAApB,CAA4BF,YAA5B;AACD,GAPmD,CAQpD;;;AACA,aAAmC,OAAOC,aAAP,CATiB,CAUpD;;AACA,MAAI,CAACZ,YAAL,EAAmBA,YAAY,GAAGY,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASE,SAAT,CAAmBH,YAAnB,EAAiC;AACtC,MAAMI,KAAK,GAAGrB,OAAO,CAAC;AAAA,WAAMgB,gBAAgB,CAACC,YAAD,CAAtB;AAAA,GAAD,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOI,KAAP;AACD","sourcesContent":["import { useMemo } from \"react\";\nimport { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\nimport { concatPagination } from \"@apollo/client/utilities\";\nimport fetch from \"cross-fetch\";\n\nlet apolloClient;\n\nexport function createApolloClient() {\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n    link: new HttpLink({\n      uri: \"https://api.coinpaprika.com/v1/coins/btc-bitcoin\", // Server URL (must be absolute)\n      fetch // Additional fetch() options like `credentials` or `headers`\n    }),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination(),\n          },\n        },\n      },\n    }),\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? createApolloClient();\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === \"undefined\") return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}