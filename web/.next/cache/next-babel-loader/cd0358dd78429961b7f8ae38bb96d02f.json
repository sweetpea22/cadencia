{"ast":null,"code":"var _jsxFileName = \"/Users/studiopreza/Desktop/cadencia/cadencia/web/components/balancer.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { AreaChart, Area, CartesianGrid, XAxis, YAxis, Tooltip, Treemap } from \"recharts\";\nexport const BALANCER_QUERY = gql`\n  query {\n    pools(first: 10, orderBy: totalSwapVolume, orderDirection: desc) {\n      totalWeight\n      tokens {\n        name\n        symbol\n        balance\n      }\n    }\n  }\n`;\nexport const balancerQueryVars = {\n  first: 10\n};\nexport default function BalancerList() {\n  const {\n    loading,\n    error,\n    data,\n    fetchMore,\n    networkStatus\n  } = useQuery(BALANCER_QUERY, {\n    variables: balancerQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true,\n    context: {\n      dataSrc: \"kyber\"\n    }\n  });\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const loadMorePosts = () => {\n    fetchMore({\n      variables: {\n        skip: pools.length\n      }\n    });\n  };\n\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, \" Error\");\n  if (loading && !loadingMorePosts) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 44\n    }\n  }, \"Loading\");\n  const {\n    pools\n  } = data;\n  let poolsList = pools.map((pool, index) => {\n    let tokens = pool.tokens;\n    console.log(tokens);\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, \"Pool \", index), tokens.map(token => {\n      __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }\n      }, token.name);\n\n      {\n        console.log(token.name);\n      }\n    }));\n  }); // const renderAreaChart = (\n  //   <AreaChart width={850} height={600} data={pools}>\n  //     <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"3 3\" />\n  //     <YAxis domain={[\"10000000\", \"dataMax\"]} dataKey=\"poolsCount\" />\n  //     <XAxis domain={[\"dataMin\", \"dataMax\"]} />\n  //     <Area\n  //       type=\"monotone\"\n  //       dataKey=\"poolsCount\"\n  //       stroke=\"#9A00D7\"\n  //       fill=\"#CF86FA\"\n  //       strokeWidth={2}\n  //     />\n  //     <Tooltip />\n  //   </AreaChart>\n  // );\n\n  const renderTreemap = __jsx(Treemap, {\n    width: 400,\n    height: 400,\n    data: pools,\n    dataKey: \"size\",\n    ratio: 4 / 3,\n    stroke: \"#fff\",\n    fill: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  });\n\n  return __jsx(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, \"Balancer Pools\"), __jsx(React.Fragment, null, poolsList));\n} // <li key={index}>\n//   Token Name: <strong>{token.name}</strong> Total Trade Volume:{\" \"}\n//   {token.totalTradeVolume}\n// </li>;","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/web/components/balancer.js"],"names":["gql","useQuery","NetworkStatus","AreaChart","Area","CartesianGrid","XAxis","YAxis","Tooltip","Treemap","BALANCER_QUERY","balancerQueryVars","first","BalancerList","loading","error","data","fetchMore","networkStatus","variables","notifyOnNetworkStatusChange","context","dataSrc","loadingMorePosts","loadMorePosts","skip","pools","length","poolsList","map","pool","index","tokens","console","log","token","name","renderTreemap"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,QAAd,EAAwBC,aAAxB,QAA6C,gBAA7C;AACA,SACEC,SADF,EAEEC,IAFF,EAGEC,aAHF,EAIEC,KAJF,EAKEC,KALF,EAMEC,OANF,EAOEC,OAPF,QAQO,UARP;AAUA,OAAO,MAAMC,cAAc,GAAGV,GAAI;;;;;;;;;;;CAA3B;AAaP,OAAO,MAAMW,iBAAiB,GAAG;AAC/BC,EAAAA,KAAK,EAAE;AADwB,CAA1B;AAIP,eAAe,SAASC,YAAT,GAAwB;AACrC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,IAAlB;AAAwBC,IAAAA,SAAxB;AAAmCC,IAAAA;AAAnC,MAAqDjB,QAAQ,CACjES,cADiE,EAEjE;AACES,IAAAA,SAAS,EAAER,iBADb;AAEE;AACA;AACA;AACAS,IAAAA,2BAA2B,EAAE,IAL/B;AAMEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX;AANX,GAFiE,CAAnE;AAYA,QAAMC,gBAAgB,GAAGL,aAAa,KAAKhB,aAAa,CAACe,SAAzD;;AAEA,QAAMO,aAAa,GAAG,MAAM;AAC1BP,IAAAA,SAAS,CAAC;AACRE,MAAAA,SAAS,EAAE;AACTM,QAAAA,IAAI,EAAEC,KAAK,CAACC;AADH;AADH,KAAD,CAAT;AAKD,GAND;;AAQA,MAAIZ,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACX,MAAID,OAAO,IAAI,CAACS,gBAAhB,EAAkC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AAElC,QAAM;AAAEG,IAAAA;AAAF,MAAYV,IAAlB;AACA,MAAIY,SAAS,GAAGF,KAAK,CAACG,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACzC,QAAIC,MAAM,GAAGF,IAAI,CAACE,MAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAUD,KAAV,CADF,EAEGC,MAAM,CAACH,GAAP,CAAYM,KAAD,IAAW;AACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIA,KAAK,CAACC,IAAV;;AACA;AACEH,QAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,IAAlB;AACD;AACF,KALA,CAFH,CADF;AAWD,GAde,CAAhB,CA3BqC,CA2CrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,aAAa,GACjB,MAAC,OAAD;AACE,IAAA,KAAK,EAAE,GADT;AAEE,IAAA,MAAM,EAAE,GAFV;AAGE,IAAA,IAAI,EAAEX,KAHR;AAIE,IAAA,OAAO,EAAC,MAJV;AAKE,IAAA,KAAK,EAAE,IAAI,CALb;AAME,IAAA,MAAM,EAAC,MANT;AAOE,IAAA,IAAI,EAAC,SAPP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;;AAYA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE,4BAAGE,SAAH,CAFF,CADF;AAMD,C,CAED;AACA;AACA;AACA","sourcesContent":["import { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport {\n  AreaChart,\n  Area,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Treemap,\n} from \"recharts\";\n\nexport const BALANCER_QUERY = gql`\n  query {\n    pools(first: 10, orderBy: totalSwapVolume, orderDirection: desc) {\n      totalWeight\n      tokens {\n        name\n        symbol\n        balance\n      }\n    }\n  }\n`;\n\nexport const balancerQueryVars = {\n  first: 10,\n};\n\nexport default function BalancerList() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    BALANCER_QUERY,\n    {\n      variables: balancerQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n      context: { dataSrc: \"kyber\" },\n    }\n  );\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const loadMorePosts = () => {\n    fetchMore({\n      variables: {\n        skip: pools.length,\n      },\n    });\n  };\n\n  if (error) return <p> Error</p>;\n  if (loading && !loadingMorePosts) return <div>Loading</div>;\n\n  const { pools } = data;\n  let poolsList = pools.map((pool, index) => {\n    let tokens = pool.tokens;\n    console.log(tokens);\n    return (\n      <div>\n        <h1>Pool {index}</h1>\n        {tokens.map((token) => {\n          <p>{token.name}</p>;\n          {\n            console.log(token.name);\n          }\n        })}\n      </div>\n    );\n  });\n\n  // const renderAreaChart = (\n  //   <AreaChart width={850} height={600} data={pools}>\n  //     <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"3 3\" />\n  //     <YAxis domain={[\"10000000\", \"dataMax\"]} dataKey=\"poolsCount\" />\n  //     <XAxis domain={[\"dataMin\", \"dataMax\"]} />\n  //     <Area\n  //       type=\"monotone\"\n  //       dataKey=\"poolsCount\"\n  //       stroke=\"#9A00D7\"\n  //       fill=\"#CF86FA\"\n  //       strokeWidth={2}\n  //     />\n  //     <Tooltip />\n  //   </AreaChart>\n  // );\n\n  const renderTreemap = (\n    <Treemap\n      width={400}\n      height={400}\n      data={pools}\n      dataKey=\"size\"\n      ratio={4 / 3}\n      stroke=\"#fff\"\n      fill=\"#8884d8\"\n    />\n  );\n\n  return (\n    <section>\n      <h1>Balancer Pools</h1>\n      <>{poolsList}</>\n    </section>\n  );\n}\n\n// <li key={index}>\n//   Token Name: <strong>{token.name}</strong> Total Trade Volume:{\" \"}\n//   {token.totalTradeVolume}\n// </li>;\n"]},"metadata":{},"sourceType":"module"}