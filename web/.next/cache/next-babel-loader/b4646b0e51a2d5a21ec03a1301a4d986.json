{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/studiopreza/Desktop/cadencia/cadencia/web/components/balancer.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    totalTradeVolumes(\\n      orderBy: actualTotalVolume\\n      orderDirection: desc\\n      first: 10\\n    ) {\\n      token {\\n        name\\n        totalTradeVolume {\\n          actualTotalVolume\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { AreaChart, Area, CartesianGrid, XAxis, YAxis, Tooltip } from \"recharts\";\nexport var BALANCER_QUERY = gql(_templateObject());\nexport var balancerQueryVars = {\n  first: 10\n};\nexport default function BalancerList() {\n  var _this = this;\n\n  var _useQuery = useQuery(BALANCER_QUERY, {\n    variables: balancerQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true,\n    context: {\n      dataSrc: \"kyber\"\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  var loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  var loadMorePosts = function loadMorePosts() {\n    fetchMore({\n      variables: {\n        skip: pools.length\n      }\n    });\n  };\n\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }, \" Error\");\n  if (loading && !loadingMorePosts) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 44\n    }\n  }, \"Loading\");\n  var totalTradeVolumes = data.totalTradeVolumes;\n\n  var renderAreaChart = __jsx(AreaChart, {\n    width: 850,\n    height: 600,\n    data: totalTradeVolumes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, __jsx(CartesianGrid, {\n    stroke: \"#ccc\",\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), __jsx(YAxis, {\n    domain: [\"10000000\", \"dataMax\"],\n    dataKey: \"tokensCount\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), __jsx(XAxis, {\n    domain: [\"dataMin\", \"dataMax\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), __jsx(Area, {\n    type: \"monotone\",\n    dataKey: \"tokensCount\",\n    stroke: \"#9A00D7\",\n    fill: \"#CF86FA\",\n    strokeWidth: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), __jsx(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }));\n\n  return __jsx(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, \"Kyber totalTradeVolumes\"), __jsx(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, totalTradeVolumes.map(function (token, index) {\n    return __jsx(\"li\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, token);\n  })));\n} // <li key={index}>\n//   Token Name: <strong>{token.name}</strong> Total Trade Volume:{\" \"}\n//   {token.totalTradeVolume}\n// </li>;","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/web/components/balancer.js"],"names":["gql","useQuery","NetworkStatus","AreaChart","Area","CartesianGrid","XAxis","YAxis","Tooltip","BALANCER_QUERY","balancerQueryVars","first","BalancerList","variables","notifyOnNetworkStatusChange","context","dataSrc","loading","error","data","fetchMore","networkStatus","loadingMorePosts","loadMorePosts","skip","pools","length","totalTradeVolumes","renderAreaChart","map","token","index"],"mappings":"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","sourcesContent":["import { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport {\n  AreaChart,\n  Area,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n} from \"recharts\";\n\nexport const BALANCER_QUERY = gql`\n  query {\n    totalTradeVolumes(\n      orderBy: actualTotalVolume\n      orderDirection: desc\n      first: 10\n    ) {\n      token {\n        name\n        totalTradeVolume {\n          actualTotalVolume\n        }\n      }\n    }\n  }\n`;\n\nexport const balancerQueryVars = {\n  first: 10,\n};\n\nexport default function BalancerList() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    BALANCER_QUERY,\n    {\n      variables: balancerQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n      context: { dataSrc: \"kyber\" },\n    }\n  );\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const loadMorePosts = () => {\n    fetchMore({\n      variables: {\n        skip: pools.length,\n      },\n    });\n  };\n\n  if (error) return <p> Error</p>;\n  if (loading && !loadingMorePosts) return <div>Loading</div>;\n\n  const { totalTradeVolumes } = data;\n\n  const renderAreaChart = (\n    <AreaChart width={850} height={600} data={totalTradeVolumes}>\n      <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"3 3\" />\n      <YAxis domain={[\"10000000\", \"dataMax\"]} dataKey=\"tokensCount\" />\n      <XAxis domain={[\"dataMin\", \"dataMax\"]} />\n      <Area\n        type=\"monotone\"\n        dataKey=\"tokensCount\"\n        stroke=\"#9A00D7\"\n        fill=\"#CF86FA\"\n        strokeWidth={2}\n      />\n      <Tooltip />\n    </AreaChart>\n  );\n\n  return (\n    <section>\n      <h1>Kyber totalTradeVolumes</h1>\n      <ol>\n        {totalTradeVolumes.map((token, index) => (\n          <li>{token}</li>\n        ))}\n      </ol>\n    </section>\n  );\n}\n\n// <li key={index}>\n//   Token Name: <strong>{token.name}</strong> Total Trade Volume:{\" \"}\n//   {token.totalTradeVolume}\n// </li>;\n"]},"metadata":{},"sourceType":"module"}