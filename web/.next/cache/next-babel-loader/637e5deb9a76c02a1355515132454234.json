{"ast":null,"code":"var _jsxFileName = \"/Users/studiopreza/Desktop/cadencia/cadencia/web/components/balancer.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { Table, Tag } from \"./antd\";\nexport const BALANCER_QUERY = gql`\n  query {\n    pools(first: 10, orderBy: swapsCount, orderDirection: desc) {\n      id\n      totalWeight\n      tokens {\n        id\n        name\n        symbol\n      }\n    }\n  }\n`;\nexport const balancerQueryVars = {\n  first: 10\n};\nexport default function BalancerList() {\n  const {\n    loading,\n    error,\n    data,\n    fetchMore,\n    networkStatus\n  } = useQuery(BALANCER_QUERY, {\n    variables: balancerQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true,\n    context: {\n      clientName: \"balancer\"\n    }\n  }); // const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n  // const loadMorePosts = () => {\n  //   fetchMore({\n  //     variables: {\n  //       skip: pools.length,\n  //     },\n  //   });\n  // };\n\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }\n  }, \" Error\");\n  if (loading && !loadingMorePosts) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 44\n    }\n  }, \"Loading\");\n  const {\n    pools\n  } = data;\n  const tokens = pools.map(pool => {\n    let tokens = pool.tokens;\n    tokens.map(token => {\n      return token.name;\n    });\n    return {\n      pool: pool.id,\n      tokens: pool.tokens\n    };\n  });\n  const columns = [{\n    title: \"Pool Id\",\n    dataIndex: \"pool\",\n    render: pool => __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, pool.substring(0, 7), \"...\", pool.substring(37, 42))\n  }, {\n    title: \"Holdings\",\n    dataIndex: \"tokens\",\n    render: tokens => __jsx(React.Fragment, null, tokens.map(t => {\n      let color = t.length % 2 < 1 ? \"volcano\" : \"geekblue\";\n      return __jsx(Tag, {\n        color: color,\n        key: t.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }\n      }, t.symbol);\n    }))\n  }];\n  return __jsx(\"section\", {\n    style: {\n      marginTop: \"4rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, \"What the biggest Balancer Pools are holding\"), __jsx(Table, {\n    columns: columns,\n    dataSource: tokens,\n    pagination: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/web/components/balancer.js"],"names":["gql","useQuery","NetworkStatus","Table","Tag","BALANCER_QUERY","balancerQueryVars","first","BalancerList","loading","error","data","fetchMore","networkStatus","variables","notifyOnNetworkStatusChange","context","clientName","loadingMorePosts","pools","tokens","map","pool","token","name","id","columns","title","dataIndex","render","substring","t","color","length","symbol","marginTop"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,QAAd,EAAwBC,aAAxB,QAA6C,gBAA7C;AACA,SAASC,KAAT,EAAgBC,GAAhB,QAA2B,QAA3B;AAEA,OAAO,MAAMC,cAAc,GAAGL,GAAI;;;;;;;;;;;;CAA3B;AAcP,OAAO,MAAMM,iBAAiB,GAAG;AAC/BC,EAAAA,KAAK,EAAE;AADwB,CAA1B;AAIP,eAAe,SAASC,YAAT,GAAwB;AACrC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,IAAlB;AAAwBC,IAAAA,SAAxB;AAAmCC,IAAAA;AAAnC,MAAqDZ,QAAQ,CACjEI,cADiE,EAEjE;AACES,IAAAA,SAAS,EAAER,iBADb;AAEE;AACA;AACA;AACAS,IAAAA,2BAA2B,EAAE,IAL/B;AAMEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd;AANX,GAFiE,CAAnE,CADqC,CAarC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIP,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACX,MAAID,OAAO,IAAI,CAACS,gBAAhB,EAAkC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AAElC,QAAM;AAAEC,IAAAA;AAAF,MAAYR,IAAlB;AAEA,QAAMS,MAAM,GAAGD,KAAK,CAACE,GAAN,CAAWC,IAAD,IAAU;AACjC,QAAIF,MAAM,GAAGE,IAAI,CAACF,MAAlB;AACAA,IAAAA,MAAM,CAACC,GAAP,CAAYE,KAAD,IAAW;AACpB,aAAOA,KAAK,CAACC,IAAb;AACD,KAFD;AAGA,WAAO;AAAEF,MAAAA,IAAI,EAAEA,IAAI,CAACG,EAAb;AAAiBL,MAAAA,MAAM,EAAEE,IAAI,CAACF;AAA9B,KAAP;AACD,GANc,CAAf;AAQA,QAAMM,OAAO,GAAG,CACd;AACEC,IAAAA,KAAK,EAAE,SADT;AAEEC,IAAAA,SAAS,EAAE,MAFb;AAGEC,IAAAA,MAAM,EAAGP,IAAD,IACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,IAAI,CAACQ,SAAL,CAAe,CAAf,EAAkB,CAAlB,CADH,SAC4BR,IAAI,CAACQ,SAAL,CAAe,EAAf,EAAmB,EAAnB,CAD5B;AAJJ,GADc,EAUd;AACEH,IAAAA,KAAK,EAAE,UADT;AAEEC,IAAAA,SAAS,EAAE,QAFb;AAGEC,IAAAA,MAAM,EAAGT,MAAD,IACN,4BACGA,MAAM,CAACC,GAAP,CAAYU,CAAD,IAAO;AACjB,UAAIC,KAAK,GAAGD,CAAC,CAACE,MAAF,GAAW,CAAX,GAAe,CAAf,GAAmB,SAAnB,GAA+B,UAA3C;AACA,aACE,MAAC,GAAD;AAAK,QAAA,KAAK,EAAED,KAAZ;AAAmB,QAAA,GAAG,EAAED,CAAC,CAACN,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGM,CAAC,CAACG,MADL,CADF;AAKD,KAPA,CADH;AAJJ,GAVc,CAAhB;AA4BA,SACE;AAAS,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDADF,EAGE,MAAC,KAAD;AAAO,IAAA,OAAO,EAAET,OAAhB;AAAyB,IAAA,UAAU,EAAEN,MAArC;AAA6C,IAAA,UAAU,EAAE,KAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD","sourcesContent":["import { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { Table, Tag } from \"./antd\";\n\nexport const BALANCER_QUERY = gql`\n  query {\n    pools(first: 10, orderBy: swapsCount, orderDirection: desc) {\n      id\n      totalWeight\n      tokens {\n        id\n        name\n        symbol\n      }\n    }\n  }\n`;\n\nexport const balancerQueryVars = {\n  first: 10,\n};\n\nexport default function BalancerList() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    BALANCER_QUERY,\n    {\n      variables: balancerQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n      context: { clientName: \"balancer\" },\n    }\n  );\n\n  // const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  // const loadMorePosts = () => {\n  //   fetchMore({\n  //     variables: {\n  //       skip: pools.length,\n  //     },\n  //   });\n  // };\n\n  if (error) return <p> Error</p>;\n  if (loading && !loadingMorePosts) return <div>Loading</div>;\n\n  const { pools } = data;\n\n  const tokens = pools.map((pool) => {\n    let tokens = pool.tokens;\n    tokens.map((token) => {\n      return token.name;\n    });\n    return { pool: pool.id, tokens: pool.tokens };\n  });\n\n  const columns = [\n    {\n      title: \"Pool Id\",\n      dataIndex: \"pool\",\n      render: (pool) => (\n        <p>\n          {pool.substring(0, 7)}...{pool.substring(37, 42)}\n        </p>\n      ),\n    },\n    {\n      title: \"Holdings\",\n      dataIndex: \"tokens\",\n      render: (tokens) => (\n        <>\n          {tokens.map((t) => {\n            let color = t.length % 2 < 1 ? \"volcano\" : \"geekblue\";\n            return (\n              <Tag color={color} key={t.id}>\n                {t.symbol}\n              </Tag>\n            );\n          })}\n        </>\n      ),\n    },\n  ];\n\n  return (\n    <section style={{ marginTop: \"4rem\" }}>\n      <h1>What the biggest Balancer Pools are holding</h1>\n\n      <Table columns={columns} dataSource={tokens} pagination={false} />\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}