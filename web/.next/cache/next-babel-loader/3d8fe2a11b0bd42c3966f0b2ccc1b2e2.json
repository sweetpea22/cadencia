{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/studiopreza/Desktop/cadencia/cadencia/web/components/balancer.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    pools(first: 10, orderBy: swapsCount, orderDirection: desc) {\\n      id\\n      totalWeight\\n      tokens {\\n        id\\n        name\\n        symbol\\n        balance\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { Table, Tag } from \"./antd\";\nexport var BALANCER_QUERY = gql(_templateObject());\nexport var balancerQueryVars = {\n  first: 10\n};\nexport default function BalancerList() {\n  var _this = this;\n\n  var _useQuery = useQuery(BALANCER_QUERY, {\n    variables: balancerQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true,\n    context: {\n      clientName: \"balancer\"\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus; // const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n  // const loadMorePosts = () => {\n  //   fetchMore({\n  //     variables: {\n  //       skip: pools.length,\n  //     },\n  //   });\n  // };\n\n\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, \" Error\");\n  if (loading && !loadingMorePosts) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 44\n    }\n  }, \"Loading\");\n  var pools = data.pools; // let poolsList = pools.map((pool, index) => {\n  //   let tokens = pool.tokens;\n  //   return (\n  //     <div key={index}>\n  //       <h1>Pool {index}</h1>\n  //       {tokens.map((token) => (\n  //         <p key={token.id}>{token.name}</p>\n  //       ))}\n  //     </div>\n  //   );\n  // });\n\n  var tokenss = pools.map(function (pool) {\n    var tokens = pool.tokens;\n    tokens.map(function (token) {\n      return token.name;\n    });\n    return {\n      pool: pool.id,\n      tokens: pool.tokens\n    };\n  });\n  var tableData = [{\n    minerId: \"t03984 - Genius Rig\",\n    rbsc: \"313.22TB\",\n    sectorQuality: \"43%\",\n    dealSuccessRate: \"90%\"\n  }, {\n    minerId: \"t0333\",\n    rbsc: \"50TB\",\n    sectorQuality: \"12%\",\n    dealSuccessRate: \"4%\"\n  }, {\n    minerId: \"t03984 - wethemboyz\",\n    rbsc: \"313.22TB\",\n    sectorQuality: \"43%\",\n    dealSuccessRate: \"90%\"\n  }, {\n    minerId: \"t03984 - hellokitty\",\n    rbsc: \"313.22TB\",\n    sectorQuality: \"43%\",\n    dealSuccessRate: \"90%\"\n  }, {\n    minerId: \"t03984 \",\n    rbsc: \"313.22TB\",\n    sectorQuality: \"43%\",\n    dealSuccessRate: \"90%\"\n  }, {\n    minerId: \"t03984 - apfelwein\",\n    rbsc: \"313.22TB\",\n    sectorQuality: \"43%\",\n    dealSuccessRate: \"90%\"\n  }];\n  var columns = [{\n    title: \"Pool\",\n    dataIndex: \"pool\"\n  }, {\n    title: \"Token List\",\n    dataIndex: \"tokens\",\n    render: function render(tags) {\n      return __jsx(React.Fragment, null, tags.map(function (tag) {\n        var color = tag.length > 2 ? \"geekblue\" : \"green\";\n        return __jsx(Tag, {\n          color: color,\n          key: tag,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }\n        }, tag);\n      }));\n    }\n  }];\n  return __jsx(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, \"What the biggest Balancer Pools are holding\"), __jsx(Table, {\n    columns: columns,\n    dataSource: tableData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/web/components/balancer.js"],"names":["gql","useQuery","NetworkStatus","Table","Tag","BALANCER_QUERY","balancerQueryVars","first","BalancerList","variables","notifyOnNetworkStatusChange","context","clientName","loading","error","data","fetchMore","networkStatus","loadingMorePosts","pools","tokenss","map","pool","tokens","token","name","id","tableData","minerId","rbsc","sectorQuality","dealSuccessRate","columns","title","dataIndex","render","tags","tag","color","length"],"mappings":"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","sourcesContent":["import { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { Table, Tag } from \"./antd\";\n\nexport const BALANCER_QUERY = gql`\n  query {\n    pools(first: 10, orderBy: swapsCount, orderDirection: desc) {\n      id\n      totalWeight\n      tokens {\n        id\n        name\n        symbol\n        balance\n      }\n    }\n  }\n`;\n\nexport const balancerQueryVars = {\n  first: 10,\n};\n\nexport default function BalancerList() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    BALANCER_QUERY,\n    {\n      variables: balancerQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n      context: { clientName: \"balancer\" },\n    }\n  );\n\n  // const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  // const loadMorePosts = () => {\n  //   fetchMore({\n  //     variables: {\n  //       skip: pools.length,\n  //     },\n  //   });\n  // };\n\n  if (error) return <p> Error</p>;\n  if (loading && !loadingMorePosts) return <div>Loading</div>;\n\n  const { pools } = data;\n  // let poolsList = pools.map((pool, index) => {\n  //   let tokens = pool.tokens;\n  //   return (\n  //     <div key={index}>\n  //       <h1>Pool {index}</h1>\n  //       {tokens.map((token) => (\n  //         <p key={token.id}>{token.name}</p>\n  //       ))}\n  //     </div>\n  //   );\n  // });\n\n  const tokenss = pools.map((pool) => {\n    let tokens = pool.tokens;\n    tokens.map((token) => {\n      return token.name;\n    });\n    return { pool: pool.id, tokens: pool.tokens };\n  });\n  const tableData = [\n    {\n      minerId: \"t03984 - Genius Rig\",\n      rbsc: \"313.22TB\",\n      sectorQuality: \"43%\",\n      dealSuccessRate: \"90%\",\n    },\n    {\n      minerId: \"t0333\",\n      rbsc: \"50TB\",\n      sectorQuality: \"12%\",\n      dealSuccessRate: \"4%\",\n    },\n    {\n      minerId: \"t03984 - wethemboyz\",\n      rbsc: \"313.22TB\",\n      sectorQuality: \"43%\",\n      dealSuccessRate: \"90%\",\n    },\n    {\n      minerId: \"t03984 - hellokitty\",\n      rbsc: \"313.22TB\",\n      sectorQuality: \"43%\",\n      dealSuccessRate: \"90%\",\n    },\n    {\n      minerId: \"t03984 \",\n      rbsc: \"313.22TB\",\n      sectorQuality: \"43%\",\n      dealSuccessRate: \"90%\",\n    },\n    {\n      minerId: \"t03984 - apfelwein\",\n      rbsc: \"313.22TB\",\n      sectorQuality: \"43%\",\n      dealSuccessRate: \"90%\",\n    },\n  ];\n\n\n  const columns = [\n    {\n      title: \"Pool\",\n      dataIndex: \"pool\",\n    },\n    {\n      title: \"Token List\",\n      dataIndex: \"tokens\",\n      render: (tags) => (\n        <>\n          {tags.map((tag) => {\n            let color = tag.length > 2 ? \"geekblue\" : \"green\";\n            return (\n              <Tag color={color} key={tag}>\n                {tag}\n              </Tag>\n            );\n          })}\n        </>\n      ),\n    },\n  ];\n\n  return (\n    <section>\n      <h1>What the biggest Balancer Pools are holding</h1>\n      {/* <>{poolsList}</> */}\n      <Table columns={columns} dataSource={tableData} />\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}