{"ast":null,"code":"// import { useMemo } from \"react\";\n// import { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\n// import { concatPagination } from \"@apollo/client/utilities\";\n// import { setContext } from \"@apollo/client/link/context\";\n// import fetch from \"isomorphic-fetch\";\n// let apolloClient;\n// export function createApolloClient(ctx) {\n//   let headers = {};\n//   let accessToken = \"\";\n//   if (ctx) {\n//     accessToken = getCookie(\"accessToken\", ctx.req);\n//     if (accessToken) {\n//       headers = {\n//         Authorization: accessToken,\n//       };\n//     }\n//   }\n//   const authLink = setContext((req, { headers }) => {\n//     // console.log(req, headers)\n//     // get the authentication token from local storage if it exists\n//     // return the headers to the context so httpLink can read them\n//     return {\n//       headers: {\n//         ...headers,\n//         authorization: accessToken ? `Bearer ${accessToken}` : \"\",\n//       },\n//     };\n//   });\n//   return new ApolloClient({\n//     ssrMode: typeof window === \"undefined\",\n//     link: new HttpLink({\n//       uri: \"https://pipl.ir/v1/getPerson\",\n//       fetch, // Server URL (must be absolute),\n//       credentials: \"include\",\n//       headers: {\n//         cookie: ctx?.req?.headers?.cookie,\n//       },\n//     }),\n//     cache: new InMemoryCache({\n//       typePolicies: {\n//         Query: {\n//           fields: {\n//             allPosts: concatPagination(),\n//           },\n//         },\n//       },\n//     }),\n//   });\n// }\n// export function initializeApollo(initialState = null) {\n//   const _apolloClient = apolloClient ?? createApolloClient();\n//   // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n//   // gets hydrated here\n//   if (initialState) {\n//     _apolloClient.cache.restore(initialState);\n//   }\n//   // For SSG and SSR always create a new Apollo Client\n//   if (typeof window === \"undefined\") return _apolloClient;\n//   // Create the Apollo Client once in the client\n//   if (!apolloClient) apolloClient = _apolloClient;\n//   return _apolloClient;\n// }\n// export function useApollo(initialState, ctx) {\n//   const store = useMemo(() => initializeApollo(initialState, ctx), [\n//     initialState,\n//     ctx,\n//   ]);\n//   return store;\n// }","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/lib/apolloClient.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { useMemo } from \"react\";\n// import { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\n// import { concatPagination } from \"@apollo/client/utilities\";\n// import { setContext } from \"@apollo/client/link/context\";\n// import fetch from \"isomorphic-fetch\";\n\n// let apolloClient;\n\n// export function createApolloClient(ctx) {\n//   let headers = {};\n//   let accessToken = \"\";\n//   if (ctx) {\n//     accessToken = getCookie(\"accessToken\", ctx.req);\n//     if (accessToken) {\n//       headers = {\n//         Authorization: accessToken,\n//       };\n//     }\n//   }\n\n//   const authLink = setContext((req, { headers }) => {\n//     // console.log(req, headers)\n//     // get the authentication token from local storage if it exists\n//     // return the headers to the context so httpLink can read them\n//     return {\n//       headers: {\n//         ...headers,\n//         authorization: accessToken ? `Bearer ${accessToken}` : \"\",\n//       },\n//     };\n//   });\n\n//   return new ApolloClient({\n//     ssrMode: typeof window === \"undefined\",\n//     link: new HttpLink({\n//       uri: \"https://pipl.ir/v1/getPerson\",\n//       fetch, // Server URL (must be absolute),\n//       credentials: \"include\",\n//       headers: {\n//         cookie: ctx?.req?.headers?.cookie,\n//       },\n//     }),\n//     cache: new InMemoryCache({\n//       typePolicies: {\n//         Query: {\n//           fields: {\n//             allPosts: concatPagination(),\n//           },\n//         },\n//       },\n//     }),\n//   });\n// }\n\n// export function initializeApollo(initialState = null) {\n//   const _apolloClient = apolloClient ?? createApolloClient();\n\n//   // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n//   // gets hydrated here\n//   if (initialState) {\n//     _apolloClient.cache.restore(initialState);\n//   }\n//   // For SSG and SSR always create a new Apollo Client\n//   if (typeof window === \"undefined\") return _apolloClient;\n//   // Create the Apollo Client once in the client\n//   if (!apolloClient) apolloClient = _apolloClient;\n\n//   return _apolloClient;\n// }\n\n// export function useApollo(initialState, ctx) {\n//   const store = useMemo(() => initializeApollo(initialState, ctx), [\n//     initialState,\n//     ctx,\n//   ]);\n//   return store;\n// }\n"]},"metadata":{},"sourceType":"script"}