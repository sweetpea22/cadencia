{"ast":null,"code":"import { useMemo } from \"react\";\nimport { ApolloClient, HttpLink, InMemoryCache, ApolloLink } from \"@apollo/client\";\nimport fetch from \"node-fetch\";\nlet apolloClient;\nconst uniswap = new HttpLink({\n  uri: \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\",\n  credentials: \"include\",\n  fetch\n});\nconst balancer = new HttpLink({\n  uri: \"https://api.thegraph.com/subgraphs/name/balancer-labs/balancer\",\n  credentials: \"include\",\n  fetch\n});\nconst server = new HttpLink({\n  uri: \"http://localhost:4000/graphql\",\n  credentials: \"include\",\n  fetch\n});\nconst otherLinks = ApolloLink.split(operation => operation.getContext().clientName === \"balancer\", // Routes the query to the proper client\nbalancer, uniswap);\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: true,\n    link: ApolloLink.split(operation => operation.getContext().clientName === \"server\", server, otherLinks),\n    cache: new InMemoryCache()\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n} // {\n//   totalTradeVolumes (orderBy:actualTotalVolume, orderDirection:desc, first:10){\n//     token {\n//       name\n//       totalTradeVolume {\n//         actualTotalVolume\n//       }\n//     }\n//   }\n//   }","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/web/lib/apolloClient.js"],"names":["useMemo","ApolloClient","HttpLink","InMemoryCache","ApolloLink","fetch","apolloClient","uniswap","uri","credentials","balancer","server","otherLinks","split","operation","getContext","clientName","createApolloClient","ssrMode","link","cache","initializeApollo","initialState","_apolloClient","restore","useApollo","store"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SACEC,YADF,EAEEC,QAFF,EAGEC,aAHF,EAIEC,UAJF,QAKO,gBALP;AAMA,OAAOC,KAAP,MAAkB,YAAlB;AAEA,IAAIC,YAAJ;AAEA,MAAMC,OAAO,GAAG,IAAIL,QAAJ,CAAa;AAC3BM,EAAAA,GAAG,EAAE,4DADsB;AAE3BC,EAAAA,WAAW,EAAE,SAFc;AAG3BJ,EAAAA;AAH2B,CAAb,CAAhB;AAMA,MAAMK,QAAQ,GAAG,IAAIR,QAAJ,CAAa;AAC5BM,EAAAA,GAAG,EAAE,gEADuB;AAE5BC,EAAAA,WAAW,EAAE,SAFe;AAG5BJ,EAAAA;AAH4B,CAAb,CAAjB;AAMA,MAAMM,MAAM,GAAG,IAAIT,QAAJ,CAAa;AAC1BM,EAAAA,GAAG,EAAE,+BADqB;AAE1BC,EAAAA,WAAW,EAAE,SAFa;AAG1BJ,EAAAA;AAH0B,CAAb,CAAf;AAMA,MAAMO,UAAU,GAAGR,UAAU,CAACS,KAAX,CAChBC,SAAD,IAAeA,SAAS,CAACC,UAAV,GAAuBC,UAAvB,KAAsC,UADpC,EACgD;AACjEN,QAFiB,EAGjBH,OAHiB,CAAnB;;AAMA,SAASU,kBAAT,GAA8B;AAC5B,SAAO,IAAIhB,YAAJ,CAAiB;AACtBiB,IAAAA,OAAO,MADe;AAGtBC,IAAAA,IAAI,EAAEf,UAAU,CAACS,KAAX,CACHC,SAAD,IAAeA,SAAS,CAACC,UAAV,GAAuBC,UAAvB,KAAsC,QADjD,EAEJL,MAFI,EAGJC,UAHI,CAHgB;AAQtBQ,IAAAA,KAAK,EAAE,IAAIjB,aAAJ;AARe,GAAjB,CAAP;AAUD;;AAED,OAAO,SAASkB,gBAAT,CAA0BC,YAAY,GAAG,IAAzC,EAA+C;AAAA;;AACpD,QAAMC,aAAa,qBAAGjB,YAAH,2DAAmBW,kBAAkB,EAAxD,CADoD,CAGpD;AACA;;;AACA,MAAIK,YAAJ,EAAkB;AAChBC,IAAAA,aAAa,CAACH,KAAd,CAAoBI,OAApB,CAA4BF,YAA5B;AACD,GAPmD,CAQpD;;;AACA,YAAmC,OAAOC,aAAP,CATiB,CAUpD;;AACA,MAAI,CAACjB,YAAL,EAAmBA,YAAY,GAAGiB,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASE,SAAT,CAAmBH,YAAnB,EAAiC;AACtC,QAAMI,KAAK,GAAG1B,OAAO,CAAC,MAAMqB,gBAAgB,CAACC,YAAD,CAAvB,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOI,KAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useMemo } from \"react\";\nimport {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  ApolloLink,\n} from \"@apollo/client\";\nimport fetch from \"node-fetch\";\n\nlet apolloClient;\n\nconst uniswap = new HttpLink({\n  uri: \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\",\n  credentials: \"include\",\n  fetch,\n});\n\nconst balancer = new HttpLink({\n  uri: \"https://api.thegraph.com/subgraphs/name/balancer-labs/balancer\",\n  credentials: \"include\",\n  fetch,\n});\n\nconst server = new HttpLink({\n  uri: \"http://localhost:4000/graphql\",\n  credentials: \"include\",\n  fetch,\n});\n\nconst otherLinks = ApolloLink.split(\n  (operation) => operation.getContext().clientName === \"balancer\", // Routes the query to the proper client\n  balancer,\n  uniswap\n);\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n\n    link: ApolloLink.split(\n      (operation) => operation.getContext().clientName === \"server\",\n      server,\n      otherLinks\n    ),\n    cache: new InMemoryCache(),\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? createApolloClient();\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === \"undefined\") return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}\n\n// {\n//   totalTradeVolumes (orderBy:actualTotalVolume, orderDirection:desc, first:10){\n//     token {\n//       name\n//       totalTradeVolume {\n//         actualTotalVolume\n//       }\n//     }\n//   }\n//   }\n"]},"metadata":{},"sourceType":"module"}