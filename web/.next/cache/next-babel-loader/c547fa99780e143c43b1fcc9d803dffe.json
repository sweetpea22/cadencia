{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useMemo } from \"react\";\nimport { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\nimport { concatPagination } from \"@apollo/client/utilities\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport fetch from \"cross-fetch\";\nvar apolloClient;\nexport function createApolloClient(ctx) {\n  var _ctx$req, _ctx$req$headers;\n\n  var headers = {};\n  var accessToken = \"\";\n\n  if (ctx) {\n    accessToken = getCookie(\"accessToken\", ctx.req);\n\n    if (accessToken) {\n      headers = {\n        Authorization: accessToken\n      };\n    }\n  }\n\n  var authLink = setContext(function (req, _ref) {\n    var headers = _ref.headers;\n    // console.log(req, headers)\n    // get the authentication token from local storage if it exists\n    // return the headers to the context so httpLink can read them\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: accessToken ? \"Bearer \".concat(accessToken) : \"\"\n      })\n    };\n  });\n  return new ApolloClient({\n    ssrMode: false,\n    link: new HttpLink({\n      uri: \"https://pipl.ir/v1/getPerson\",\n      fetch: fetch,\n      // Server URL (must be absolute),\\\n      credentials: \"include\",\n      headers: {\n        cookie: ctx === null || ctx === void 0 ? void 0 : (_ctx$req = ctx.req) === null || _ctx$req === void 0 ? void 0 : (_ctx$req$headers = _ctx$req.headers) === null || _ctx$req$headers === void 0 ? void 0 : _ctx$req$headers.cookie\n      } // Additional fetch() options like `credentials` or `headers`\n\n    }),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination()\n          }\n        }\n      }\n    })\n  });\n}\nexport function initializeApollo() {\n  var _apolloClient2;\n\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (false) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState, ctx) {\n  var store = useMemo(function () {\n    return initializeApollo(initialState, ctx);\n  }, [initialState, ctx]);\n  return store;\n}","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/lib/apolloClient.js"],"names":["useMemo","ApolloClient","HttpLink","InMemoryCache","concatPagination","setContext","fetch","apolloClient","createApolloClient","ctx","headers","accessToken","getCookie","req","Authorization","authLink","authorization","ssrMode","link","uri","credentials","cookie","cache","typePolicies","Query","fields","allPosts","initializeApollo","initialState","_apolloClient","restore","useApollo","store"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,QAAsD,gBAAtD;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,IAAIC,YAAJ;AAEA,OAAO,SAASC,kBAAT,CAA4BC,GAA5B,EAAiC;AAAA;;AACtC,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,WAAW,GAAG,EAAlB;;AACA,MAAIF,GAAJ,EAAS;AACPE,IAAAA,WAAW,GAAGC,SAAS,CAAC,aAAD,EAAgBH,GAAG,CAACI,GAApB,CAAvB;;AACA,QAAIF,WAAJ,EAAiB;AACfD,MAAAA,OAAO,GAAG;AACRI,QAAAA,aAAa,EAAEH;AADP,OAAV;AAGD;AACF;;AAED,MAAMI,QAAQ,GAAGV,UAAU,CAAC,UAACQ,GAAD,QAAsB;AAAA,QAAdH,OAAc,QAAdA,OAAc;AAChD;AACA;AACA;AACA,WAAO;AACLA,MAAAA,OAAO,oBACFA,OADE;AAELM,QAAAA,aAAa,EAAEL,WAAW,oBAAaA,WAAb,IAA6B;AAFlD;AADF,KAAP;AAMD,GAV0B,CAA3B;AAYA,SAAO,IAAIV,YAAJ,CAAiB;AACtBgB,IAAAA,OAAO,OADe;AAEtBC,IAAAA,IAAI,EAAE,IAAIhB,QAAJ,CAAa;AACjBiB,MAAAA,GAAG,EAAE,8BADY;AAEjBb,MAAAA,KAAK,EAALA,KAFiB;AAEV;AACPc,MAAAA,WAAW,EAAE,SAHI;AAIjBV,MAAAA,OAAO,EAAE;AACPW,QAAAA,MAAM,EAAEZ,GAAF,aAAEA,GAAF,mCAAEA,GAAG,CAAEI,GAAP,iEAAE,SAAUH,OAAZ,qDAAE,iBAAmBW;AADpB,OAJQ,CAMd;;AANc,KAAb,CAFgB;AAUtBC,IAAAA,KAAK,EAAE,IAAInB,aAAJ,CAAkB;AACvBoB,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE;AACNC,YAAAA,QAAQ,EAAEtB,gBAAgB;AADpB;AADH;AADK;AADS,KAAlB;AAVe,GAAjB,CAAP;AAoBD;AAED,OAAO,SAASuB,gBAAT,GAA+C;AAAA;;AAAA,MAArBC,YAAqB,uEAAN,IAAM;;AACpD,MAAMC,aAAa,qBAAGtB,YAAH,2DAAmBC,kBAAkB,EAAxD,CADoD,CAGpD;AACA;;;AACA,MAAIoB,YAAJ,EAAkB;AAChBC,IAAAA,aAAa,CAACP,KAAd,CAAoBQ,OAApB,CAA4BF,YAA5B;AACD,GAPmD,CAQpD;;;AACA,aAAmC,OAAOC,aAAP,CATiB,CAUpD;;AACA,MAAI,CAACtB,YAAL,EAAmBA,YAAY,GAAGsB,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASE,SAAT,CAAmBH,YAAnB,EAAiCnB,GAAjC,EAAsC;AAC3C,MAAMuB,KAAK,GAAGhC,OAAO,CAAC;AAAA,WAAM2B,gBAAgB,CAACC,YAAD,EAAenB,GAAf,CAAtB;AAAA,GAAD,EAA4C,CAC/DmB,YAD+D,EAE/DnB,GAF+D,CAA5C,CAArB;AAIA,SAAOuB,KAAP;AACD","sourcesContent":["import { useMemo } from \"react\";\nimport { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\nimport { concatPagination } from \"@apollo/client/utilities\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport fetch from \"cross-fetch\";\n\nlet apolloClient;\n\nexport function createApolloClient(ctx) {\n  let headers = {};\n  let accessToken = \"\";\n  if (ctx) {\n    accessToken = getCookie(\"accessToken\", ctx.req);\n    if (accessToken) {\n      headers = {\n        Authorization: accessToken,\n      };\n    }\n  }\n\n  const authLink = setContext((req, { headers }) => {\n    // console.log(req, headers)\n    // get the authentication token from local storage if it exists\n    // return the headers to the context so httpLink can read them\n    return {\n      headers: {\n        ...headers,\n        authorization: accessToken ? `Bearer ${accessToken}` : \"\",\n      },\n    };\n  });\n\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n    link: new HttpLink({\n      uri: \"https://pipl.ir/v1/getPerson\",\n      fetch, // Server URL (must be absolute),\\\n      credentials: \"include\",\n      headers: {\n        cookie: ctx?.req?.headers?.cookie,\n      }, // Additional fetch() options like `credentials` or `headers`\n    }),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination(),\n          },\n        },\n      },\n    }),\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? createApolloClient();\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === \"undefined\") return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function useApollo(initialState, ctx) {\n  const store = useMemo(() => initializeApollo(initialState, ctx), [\n    initialState,\n    ctx,\n  ]);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}