{"ast":null,"code":"var _jsxFileName = \"/Users/studiopreza/Desktop/cadencia/cadencia/web/components/uniswap.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nexport const UNISWAP_QUERY = gql`\n  query {\n    tokens(\n      orderBy: txCount\n      orderDirection: desc\n      first: 1000\n      where: { txCount_gt: 3000 }\n    ) {\n      id\n      symbol\n      name\n      tradeVolume\n    }\n  }\n`;\nexport const uniswapQueryVars = {\n  first: 10\n};\nexport default function UniswapList() {\n  const {\n    loading,\n    error,\n    data,\n    fetchMore,\n    networkStatus\n  } = useQuery(UNISWAP_QUERY, {\n    variables: uniswapQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true,\n    context: {\n      clientName: \"uniswap\"\n    }\n  });\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const loadMorePosts = () => {\n    fetchMore({\n      variables: {\n        skip: tokens.length\n      }\n    });\n  };\n\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }\n  }, \" Error\");\n  if (loading && !loadingMorePosts) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 44\n    }\n  }, \"Loading\");\n  const {\n    tokens\n  } = data;\n\n  __jsx(BarChart, {\n    width: 500,\n    height: 300,\n    data: data,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 3\n    }\n  }, __jsx(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 3\n    }\n  }), __jsx(XAxis, {\n    dataKey: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 3\n    }\n  }), __jsx(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 3\n    }\n  }), __jsx(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 3\n    }\n  }), __jsx(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 3\n    }\n  }), __jsx(Bar, {\n    dataKey: \"pv\",\n    fill: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 3\n    }\n  }), __jsx(Bar, {\n    dataKey: \"uv\",\n    fill: \"#82ca9d\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 3\n    }\n  }));\n\n  return __jsx(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, \"Most Swapped Tokens on Uniswap\"), __jsx(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, tokens.map((token, index) => __jsx(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, \"Token Name: \", __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }, token.name), \" Total Trade Volume:\", \" \", token.tradeVolume))));\n}","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/web/components/uniswap.js"],"names":["gql","useQuery","NetworkStatus","BarChart","Bar","Cell","XAxis","YAxis","CartesianGrid","Tooltip","Legend","UNISWAP_QUERY","uniswapQueryVars","first","UniswapList","loading","error","data","fetchMore","networkStatus","variables","notifyOnNetworkStatusChange","context","clientName","loadingMorePosts","loadMorePosts","skip","tokens","length","top","right","left","bottom","map","token","index","name","tradeVolume"],"mappings":"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","sourcesContent":["import { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport {\n  BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nexport const UNISWAP_QUERY = gql`\n  query {\n    tokens(\n      orderBy: txCount\n      orderDirection: desc\n      first: 1000\n      where: { txCount_gt: 3000 }\n    ) {\n      id\n      symbol\n      name\n      tradeVolume\n    }\n  }\n`;\n\nexport const uniswapQueryVars = {\n  first: 10,\n};\n\nexport default function UniswapList() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    UNISWAP_QUERY,\n    {\n      variables: uniswapQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n      context: { clientName: \"uniswap\" },\n    }\n  );\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const loadMorePosts = () => {\n    fetchMore({\n      variables: {\n        skip: tokens.length,\n      },\n    });\n  };\n\n  if (error) return <p> Error</p>;\n  if (loading && !loadingMorePosts) return <div>Loading</div>;\n\n  const { tokens } = data;\n  <BarChart\n  width={500}\n  height={300}\n  data={data}\n  margin={{\n    top: 5, right: 30, left: 20, bottom: 5,\n  }}\n>\n  <CartesianGrid strokeDasharray=\"3 3\" />\n  <XAxis dataKey=\"name\" />\n  <YAxis />\n  <Tooltip />\n  <Legend />\n  <Bar dataKey=\"pv\" fill=\"#8884d8\" />\n  <Bar dataKey=\"uv\" fill=\"#82ca9d\" />\n</BarChart>\n  return (\n    <section>\n      <h1>Most Swapped Tokens on Uniswap</h1>\n      <ol>\n        {tokens.map((token, index) => (\n          <li key={index}>\n            Token Name: <strong>{token.name}</strong> Total Trade Volume:{\" \"}\n            {token.tradeVolume}\n          </li>\n        ))}\n      </ol>\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}