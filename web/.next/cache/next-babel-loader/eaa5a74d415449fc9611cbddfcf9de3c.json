{"ast":null,"code":"import { useMemo } from \"react\";\nimport { ApolloClient, HttpLink, InMemoryCache, ApolloLink } from \"@apollo/client\";\nimport { concatPagination } from \"@apollo/client/utilities\"; // import fetch from \"node-fetch\";\n\nlet apolloClient;\nconst uniswap = new HttpLink({\n  uri: \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\",\n  credentials: \"include\"\n});\nconst balancer = new HttpLink({\n  uri: \"https://api.thegraph.com/subgraphs/name/balancer-labs/balancer\",\n  credentials: \"include\",\n  fetch\n}); // // Compound\n// // link: new HttpLink({\n// //   uri: \"https://api.thegraph.com/subgraphs/name/graphprotocol/compound-v2\", // Server URL (must be absolute)\n// //   credentials: \"include\", // Additional fetch() options like `credentials` or `headers`\n// // }),\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: true,\n    link: ApolloLink.split(operation => operation.getContext().dataSrc === \"balancer\", balancer, uniswap),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination()\n          }\n        }\n      }\n    })\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/web/lib/apolloClient.js"],"names":["useMemo","ApolloClient","HttpLink","InMemoryCache","ApolloLink","concatPagination","apolloClient","uniswap","uri","credentials","balancer","fetch","createApolloClient","ssrMode","link","split","operation","getContext","dataSrc","cache","typePolicies","Query","fields","allPosts","initializeApollo","initialState","_apolloClient","restore","useApollo","store"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SACEC,YADF,EAEEC,QAFF,EAGEC,aAHF,EAIEC,UAJF,QAKO,gBALP;AAMA,SAASC,gBAAT,QAAiC,0BAAjC,C,CACA;;AAEA,IAAIC,YAAJ;AAEA,MAAMC,OAAO,GAAG,IAAIL,QAAJ,CAAa;AAC3BM,EAAAA,GAAG,EAAE,4DADsB;AAE3BC,EAAAA,WAAW,EAAE;AAFc,CAAb,CAAhB;AAKA,MAAMC,QAAQ,GAAG,IAAIR,QAAJ,CAAa;AAC5BM,EAAAA,GAAG,EAAE,gEADuB;AAE5BC,EAAAA,WAAW,EAAE,SAFe;AAG5BE,EAAAA;AAH4B,CAAb,CAAjB,C,CAMA;AACA;AACA;AACA;AACA;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,SAAO,IAAIX,YAAJ,CAAiB;AACtBY,IAAAA,OAAO,MADe;AAGtBC,IAAAA,IAAI,EAAEV,UAAU,CAACW,KAAX,CACHC,SAAD,IAAeA,SAAS,CAACC,UAAV,GAAuBC,OAAvB,KAAmC,UAD9C,EAEJR,QAFI,EAGJH,OAHI,CAHgB;AAQtBY,IAAAA,KAAK,EAAE,IAAIhB,aAAJ,CAAkB;AACvBiB,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE;AACNC,YAAAA,QAAQ,EAAElB,gBAAgB;AADpB;AADH;AADK;AADS,KAAlB;AARe,GAAjB,CAAP;AAkBD;;AAED,OAAO,SAASmB,gBAAT,CAA0BC,YAAY,GAAG,IAAzC,EAA+C;AAAA;;AACpD,QAAMC,aAAa,qBAAGpB,YAAH,2DAAmBM,kBAAkB,EAAxD,CADoD,CAGpD;AACA;;;AACA,MAAIa,YAAJ,EAAkB;AAChBC,IAAAA,aAAa,CAACP,KAAd,CAAoBQ,OAApB,CAA4BF,YAA5B;AACD,GAPmD,CAQpD;;;AACA,YAAmC,OAAOC,aAAP,CATiB,CAUpD;;AACA,MAAI,CAACpB,YAAL,EAAmBA,YAAY,GAAGoB,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASE,SAAT,CAAmBH,YAAnB,EAAiC;AACtC,QAAMI,KAAK,GAAG7B,OAAO,CAAC,MAAMwB,gBAAgB,CAACC,YAAD,CAAvB,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOI,KAAP;AACD","sourcesContent":["import { useMemo } from \"react\";\nimport {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  ApolloLink,\n} from \"@apollo/client\";\nimport { concatPagination } from \"@apollo/client/utilities\";\n// import fetch from \"node-fetch\";\n\nlet apolloClient;\n\nconst uniswap = new HttpLink({\n  uri: \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\",\n  credentials: \"include\",\n});\n\nconst balancer = new HttpLink({\n  uri: \"https://api.thegraph.com/subgraphs/name/balancer-labs/balancer\",\n  credentials: \"include\",\n  fetch,\n});\n\n// // Compound\n// // link: new HttpLink({\n// //   uri: \"https://api.thegraph.com/subgraphs/name/graphprotocol/compound-v2\", // Server URL (must be absolute)\n// //   credentials: \"include\", // Additional fetch() options like `credentials` or `headers`\n// // }),\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n\n    link: ApolloLink.split(\n      (operation) => operation.getContext().dataSrc === \"balancer\",\n      balancer,\n      uniswap\n    ), \n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination(),\n          },\n        },\n      },\n    }),\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? createApolloClient();\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === \"undefined\") return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}