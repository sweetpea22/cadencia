{"ast":null,"code":"var _jsxFileName = \"/Users/studiopreza/Desktop/cadencia/cadencia/web/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from \"@apollo/client\";\nexport default (() => {\n  return __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 10\n    }\n  }, \"Hello from Home\");\n});\nexport async function getStaticProps() {\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: UNISWAP_QUERY,\n    variables: uniswapQueryVars\n  });\n  await apolloClient.query({\n    query: BALANCER_QUERY,\n    variables: balancerQueryVars,\n    context: {\n      dataSrc: \"balancer\"\n    }\n  });\n  return {\n    props: {\n      initialApolloState: apolloClient.cache.extract()\n    },\n    revalidate: 1\n  };\n}","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/web/pages/index.js"],"names":["gql","useQuery","getStaticProps","apolloClient","initializeApollo","query","UNISWAP_QUERY","variables","uniswapQueryVars","BALANCER_QUERY","balancerQueryVars","context","dataSrc","props","initialApolloState","cache","extract","revalidate"],"mappings":";;;AAAA,SAAQA,GAAR,EAAaC,QAAb,QAA4B,gBAA5B;AAEA,gBAAe,MAAM;AACnB,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAP;AACD,CAFD;AAKA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,YAAY,GAAGC,gBAAgB,EAArC;AAEA,QAAMD,YAAY,CAACE,KAAb,CAAmB;AACvBA,IAAAA,KAAK,EAAEC,aADgB;AAEvBC,IAAAA,SAAS,EAAEC;AAFY,GAAnB,CAAN;AAKA,QAAML,YAAY,CAACE,KAAb,CAAmB;AACvBA,IAAAA,KAAK,EAAEI,cADgB;AAEvBF,IAAAA,SAAS,EAAEG,iBAFY;AAGvBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE;AADF;AAHc,GAAnB,CAAN;AAQA,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLC,MAAAA,kBAAkB,EAAEX,YAAY,CAACY,KAAb,CAAmBC,OAAnB;AADf,KADF;AAILC,IAAAA,UAAU,EAAE;AAJP,GAAP;AAMD","sourcesContent":["import {gql, useQuery} from \"@apollo/client\";\n\nexport default () => {\n  return <h1>Hello from Home</h1>;\n};\n\n\nexport async function getStaticProps() {\n  const apolloClient = initializeApollo();\n\n  await apolloClient.query({\n    query: UNISWAP_QUERY,\n    variables: uniswapQueryVars,\n  });\n\n  await apolloClient.query({\n    query: BALANCER_QUERY,\n    variables: balancerQueryVars,\n    context: {\n      dataSrc: \"balancer\",\n    },\n  });\n\n  return {\n    props: {\n      initialApolloState: apolloClient.cache.extract(),\n    },\n    revalidate: 1,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}