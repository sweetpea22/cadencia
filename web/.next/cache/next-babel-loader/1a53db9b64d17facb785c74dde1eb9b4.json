{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/studiopreza/Desktop/cadencia/cadencia/web/components/balancer.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    pools(first: 10, orderBy: swapsCount, orderDirection: desc) {\\n      id\\n      totalWeight\\n      tokens {\\n        name\\n        symbol\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { Table, Tag } from \"./antd\";\nexport var BALANCER_QUERY = gql(_templateObject());\nexport var balancerQueryVars = {\n  first: 10\n};\nexport default function BalancerList() {\n  var _this = this;\n\n  var _useQuery = useQuery(BALANCER_QUERY, {\n    variables: balancerQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true,\n    context: {\n      clientName: \"balancer\"\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus; // const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n  // const loadMorePosts = () => {\n  //   fetchMore({\n  //     variables: {\n  //       skip: pools.length,\n  //     },\n  //   });\n  // };\n\n\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }, \" Error\");\n  if (loading && !loadingMorePosts) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 44\n    }\n  }, \"Loading\");\n  var pools = data.pools; // let poolsList = pools.map((pool, index) => {\n  //   let tokens = pool.tokens;\n  //   return (\n  //     <div key={index}>\n  //       <h1>Pool {index}</h1>\n  //       {tokens.map((token) => (\n  //         <p key={token.id}>{token.name}</p>\n  //       ))}\n  //     </div>\n  //   );\n  // });\n\n  var tokens = pools.map(function (pool) {\n    var tokens = pool.tokens;\n    tokens.map(function (token) {\n      return token.name;\n    });\n    return {\n      pool: pool.id,\n      tokens: pool.tokens\n    };\n  });\n  console.log(tokens);\n  var tableData = [{\n    minerId: \"t03984 - Genius Rig\",\n    rbsc: \"313.22TB\",\n    sectorQuality: \"43%\",\n    dealSuccessRate: \"90%\"\n  }, {\n    minerId: \"t0333\",\n    rbsc: \"50TB\",\n    sectorQuality: \"12%\",\n    dealSuccessRate: \"4%\"\n  }, {\n    minerId: \"t03984 - wethemboyz\",\n    rbsc: \"313.22TB\",\n    sectorQuality: \"43%\",\n    dealSuccessRate: \"90%\"\n  }, {\n    minerId: \"t03984 - hellokitty\",\n    rbsc: \"313.22TB\",\n    sectorQuality: \"43%\",\n    dealSuccessRate: \"90%\"\n  }, {\n    minerId: \"t03984 \",\n    rbsc: \"313.22TB\",\n    sectorQuality: \"43%\",\n    dealSuccessRate: \"90%\"\n  }, {\n    minerId: \"t03984 - apfelwein\",\n    rbsc: \"313.22TB\",\n    sectorQuality: \"43%\",\n    dealSuccessRate: \"90%\"\n  }];\n  var columns = [{\n    title: \"ID\",\n    dataIndex: \"pool\",\n    render: function render(pool) {\n      return __jsx(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }\n      }, pool.substring(0, 10));\n    }\n  }];\n  return __jsx(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, \"What the biggest Balancer Pools are holding\"), __jsx(Table, {\n    columns: columns,\n    dataSource: tokens,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }));\n} // render: (tags) => (\n//   <>\n//     {tags.map((tag) => {\n//       let color = tag.length > 2 ? \"geekblue\" : \"green\";\n//       return (\n//         <Tag color={color} key={tag}>\n//           {tag}\n//         </Tag>\n//       );\n//     })}\n//   </>\n// ),","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/web/components/balancer.js"],"names":["gql","useQuery","NetworkStatus","Table","Tag","BALANCER_QUERY","balancerQueryVars","first","BalancerList","variables","notifyOnNetworkStatusChange","context","clientName","loading","error","data","fetchMore","networkStatus","loadingMorePosts","pools","tokens","map","pool","token","name","id","console","log","tableData","minerId","rbsc","sectorQuality","dealSuccessRate","columns","title","dataIndex","render","substring"],"mappings":"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","sourcesContent":["import { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { Table, Tag } from \"./antd\";\n\nexport const BALANCER_QUERY = gql`\n  query {\n    pools(first: 10, orderBy: swapsCount, orderDirection: desc) {\n      id\n      totalWeight\n      tokens {\n        name\n        symbol\n      }\n    }\n  }\n`;\n\nexport const balancerQueryVars = {\n  first: 10,\n};\n\nexport default function BalancerList() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    BALANCER_QUERY,\n    {\n      variables: balancerQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n      context: { clientName: \"balancer\" },\n    }\n  );\n\n  // const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  // const loadMorePosts = () => {\n  //   fetchMore({\n  //     variables: {\n  //       skip: pools.length,\n  //     },\n  //   });\n  // };\n\n  if (error) return <p> Error</p>;\n  if (loading && !loadingMorePosts) return <div>Loading</div>;\n\n  const { pools } = data;\n  // let poolsList = pools.map((pool, index) => {\n  //   let tokens = pool.tokens;\n  //   return (\n  //     <div key={index}>\n  //       <h1>Pool {index}</h1>\n  //       {tokens.map((token) => (\n  //         <p key={token.id}>{token.name}</p>\n  //       ))}\n  //     </div>\n  //   );\n  // });\n\n  const tokens = pools.map((pool) => {\n    let tokens = pool.tokens;\n    tokens.map((token) => {\n      return token.name;\n    });\n    return { pool: pool.id, tokens: pool.tokens };\n  });\n\n  console.log(tokens);\n  const tableData = [\n    {\n      minerId: \"t03984 - Genius Rig\",\n      rbsc: \"313.22TB\",\n      sectorQuality: \"43%\",\n      dealSuccessRate: \"90%\",\n    },\n    {\n      minerId: \"t0333\",\n      rbsc: \"50TB\",\n      sectorQuality: \"12%\",\n      dealSuccessRate: \"4%\",\n    },\n    {\n      minerId: \"t03984 - wethemboyz\",\n      rbsc: \"313.22TB\",\n      sectorQuality: \"43%\",\n      dealSuccessRate: \"90%\",\n    },\n    {\n      minerId: \"t03984 - hellokitty\",\n      rbsc: \"313.22TB\",\n      sectorQuality: \"43%\",\n      dealSuccessRate: \"90%\",\n    },\n    {\n      minerId: \"t03984 \",\n      rbsc: \"313.22TB\",\n      sectorQuality: \"43%\",\n      dealSuccessRate: \"90%\",\n    },\n    {\n      minerId: \"t03984 - apfelwein\",\n      rbsc: \"313.22TB\",\n      sectorQuality: \"43%\",\n      dealSuccessRate: \"90%\",\n    },\n  ];\n\n  const columns = [\n    {\n      title: \"ID\",\n      dataIndex: \"pool\",\n      render: (pool) => <p>{pool.substring(0, 10)}</p>,\n    },\n  ];\n\n  return (\n    <section>\n      <h1>What the biggest Balancer Pools are holding</h1>\n      {/* <>{poolsList}</> */}\n      <Table columns={columns} dataSource={tokens} />\n    </section>\n  );\n}\n\n// render: (tags) => (\n//   <>\n//     {tags.map((tag) => {\n//       let color = tag.length > 2 ? \"geekblue\" : \"green\";\n//       return (\n//         <Tag color={color} key={tag}>\n//           {tag}\n//         </Tag>\n//       );\n//     })}\n//   </>\n// ),\n"]},"metadata":{},"sourceType":"module"}