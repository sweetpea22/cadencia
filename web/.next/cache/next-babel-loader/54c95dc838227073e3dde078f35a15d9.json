{"ast":null,"code":"var _jsxFileName = \"/Users/studiopreza/Desktop/cadencia/cadencia/web/components/balancer.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { Table, Tag } from \"./antd\";\nexport const BALANCER_QUERY = gql`\n  query {\n    pools(first: 10, orderBy: swapsCount, orderDirection: desc) {\n      id\n      totalWeight\n      tokens {\n        id\n        name\n        symbol\n        balance\n      }\n    }\n  }\n`;\nexport const balancerQueryVars = {\n  first: 10\n};\nexport default function BalancerList() {\n  const {\n    loading,\n    error,\n    data,\n    fetchMore,\n    networkStatus\n  } = useQuery(BALANCER_QUERY, {\n    variables: balancerQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true,\n    context: {\n      clientName: \"balancer\"\n    }\n  }); // const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n  // const loadMorePosts = () => {\n  //   fetchMore({\n  //     variables: {\n  //       skip: pools.length,\n  //     },\n  //   });\n  // };\n\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, \" Error\");\n  if (loading && !loadingMorePosts) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 44\n    }\n  }, \"Loading\");\n  const {\n    pools\n  } = data; // let poolsList = pools.map((pool, index) => {\n  //   let tokens = pool.tokens;\n  //   return (\n  //     <div key={index}>\n  //       <h1>Pool {index}</h1>\n  //       {tokens.map((token) => (\n  //         <p key={token.id}>{token.name}</p>\n  //       ))}\n  //     </div>\n  //   );\n  // });\n\n  const tokenes = pools.map(pool => {\n    let tokens = pool.tokens;\n    tokens.map(token => {\n      return token.name;\n    });\n    return {\n      pool: pool.id,\n      tokens: pool.tokens\n    };\n  });\n  const columns = [{\n    title: \"Pool\",\n    dataIndex: \"pool\"\n  }, {\n    title: \"Token List\",\n    dataIndex: \"tokens\",\n    render: tags => __jsx(React.Fragment, null, tags.map(tag => {\n      let color = tag.length > 2 ? \"geekblue\" : \"green\";\n      return __jsx(Tag, {\n        color: color,\n        key: tag,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }\n      }, tag);\n    }))\n  }];\n  return __jsx(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, \"What the biggest Balancer Pools are holding\"), __jsx(Table, {\n    columns: columns,\n    dataSource: dataSrc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/web/components/balancer.js"],"names":["gql","useQuery","NetworkStatus","Table","Tag","BALANCER_QUERY","balancerQueryVars","first","BalancerList","loading","error","data","fetchMore","networkStatus","variables","notifyOnNetworkStatusChange","context","clientName","loadingMorePosts","pools","tokenes","map","pool","tokens","token","name","id","columns","title","dataIndex","render","tags","tag","color","length","dataSrc"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,QAAd,EAAwBC,aAAxB,QAA6C,gBAA7C;AACA,SAASC,KAAT,EAAgBC,GAAhB,QAA2B,QAA3B;AAEA,OAAO,MAAMC,cAAc,GAAGL,GAAI;;;;;;;;;;;;;CAA3B;AAeP,OAAO,MAAMM,iBAAiB,GAAG;AAC/BC,EAAAA,KAAK,EAAE;AADwB,CAA1B;AAIP,eAAe,SAASC,YAAT,GAAwB;AACrC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,IAAlB;AAAwBC,IAAAA,SAAxB;AAAmCC,IAAAA;AAAnC,MAAqDZ,QAAQ,CACjEI,cADiE,EAEjE;AACES,IAAAA,SAAS,EAAER,iBADb;AAEE;AACA;AACA;AACAS,IAAAA,2BAA2B,EAAE,IAL/B;AAMEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd;AANX,GAFiE,CAAnE,CADqC,CAarC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIP,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACX,MAAID,OAAO,IAAI,CAACS,gBAAhB,EAAkC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AAElC,QAAM;AAAEC,IAAAA;AAAF,MAAYR,IAAlB,CA1BqC,CA2BrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMS,OAAO,GAAGD,KAAK,CAACE,GAAN,CAAWC,IAAD,IAAU;AAClC,QAAIC,MAAM,GAAGD,IAAI,CAACC,MAAlB;AACAA,IAAAA,MAAM,CAACF,GAAP,CAAYG,KAAD,IAAW;AACpB,aAAOA,KAAK,CAACC,IAAb;AACD,KAFD;AAGA,WAAO;AAAEH,MAAAA,IAAI,EAAEA,IAAI,CAACI,EAAb;AAAiBH,MAAAA,MAAM,EAAED,IAAI,CAACC;AAA9B,KAAP;AACD,GANe,CAAhB;AAQA,QAAMI,OAAO,GAAG,CACd;AACEC,IAAAA,KAAK,EAAE,MADT;AAEEC,IAAAA,SAAS,EAAE;AAFb,GADc,EAKd;AACED,IAAAA,KAAK,EAAE,YADT;AAEEC,IAAAA,SAAS,EAAE,QAFb;AAGEC,IAAAA,MAAM,EAAGC,IAAD,IACN,4BACGA,IAAI,CAACV,GAAL,CAAUW,GAAD,IAAS;AACjB,UAAIC,KAAK,GAAGD,GAAG,CAACE,MAAJ,GAAa,CAAb,GAAiB,UAAjB,GAA8B,OAA1C;AACA,aACE,MAAC,GAAD;AAAK,QAAA,KAAK,EAAED,KAAZ;AAAmB,QAAA,GAAG,EAAED,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGA,GADH,CADF;AAKD,KAPA,CADH;AAJJ,GALc,CAAhB;AAuBA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDADF,EAGE,MAAC,KAAD;AAAO,IAAA,OAAO,EAAEL,OAAhB;AAAyB,IAAA,UAAU,EAAEQ,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD","sourcesContent":["import { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { Table, Tag } from \"./antd\";\n\nexport const BALANCER_QUERY = gql`\n  query {\n    pools(first: 10, orderBy: swapsCount, orderDirection: desc) {\n      id\n      totalWeight\n      tokens {\n        id\n        name\n        symbol\n        balance\n      }\n    }\n  }\n`;\n\nexport const balancerQueryVars = {\n  first: 10,\n};\n\nexport default function BalancerList() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    BALANCER_QUERY,\n    {\n      variables: balancerQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n      context: { clientName: \"balancer\" },\n    }\n  );\n\n  // const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  // const loadMorePosts = () => {\n  //   fetchMore({\n  //     variables: {\n  //       skip: pools.length,\n  //     },\n  //   });\n  // };\n\n  if (error) return <p> Error</p>;\n  if (loading && !loadingMorePosts) return <div>Loading</div>;\n\n  const { pools } = data;\n  // let poolsList = pools.map((pool, index) => {\n  //   let tokens = pool.tokens;\n  //   return (\n  //     <div key={index}>\n  //       <h1>Pool {index}</h1>\n  //       {tokens.map((token) => (\n  //         <p key={token.id}>{token.name}</p>\n  //       ))}\n  //     </div>\n  //   );\n  // });\n\n  const tokenes = pools.map((pool) => {\n    let tokens = pool.tokens;\n    tokens.map((token) => {\n      return token.name;\n    });\n    return { pool: pool.id, tokens: pool.tokens };\n  });\n\n  const columns = [\n    {\n      title: \"Pool\",\n      dataIndex: \"pool\",\n    },\n    {\n      title: \"Token List\",\n      dataIndex: \"tokens\",\n      render: (tags) => (\n        <>\n          {tags.map((tag) => {\n            let color = tag.length > 2 ? \"geekblue\" : \"green\";\n            return (\n              <Tag color={color} key={tag}>\n                {tag}\n              </Tag>\n            );\n          })}\n        </>\n      ),\n    },\n  ];\n\n  return (\n    <section>\n      <h1>What the biggest Balancer Pools are holding</h1>\n      {/* <>{poolsList}</> */}\n      <Table columns={columns} dataSource={dataSrc} />\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}