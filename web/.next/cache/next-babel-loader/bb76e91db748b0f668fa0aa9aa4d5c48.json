{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/studiopreza/Desktop/cadencia/cadencia/web/components/balancer.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    pools(first: 10, orderBy: swapsCount, orderDirection: desc) {\\n      id\\n      totalWeight\\n      tokens {\\n        id\\n        name\\n        symbol\\n        balance\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { Table } from \"../antd\";\nexport var BALANCER_QUERY = gql(_templateObject());\nexport var balancerQueryVars = {\n  first: 10\n};\nexport default function BalancerList() {\n  var _this = this;\n\n  var _useQuery = useQuery(BALANCER_QUERY, {\n    variables: balancerQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true,\n    context: {\n      clientName: \"balancer\"\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus; // const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n  // const loadMorePosts = () => {\n  //   fetchMore({\n  //     variables: {\n  //       skip: pools.length,\n  //     },\n  //   });\n  // };\n\n\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, \" Error\");\n  if (loading && !loadingMorePosts) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 44\n    }\n  }, \"Loading\");\n  var pools = data.pools;\n  var poolsList = pools.map(function (pool, index) {\n    var tokens = pool.tokens;\n    return __jsx(\"div\", {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, \"Pool \", index), tokens.map(function (token) {\n      return __jsx(\"p\", {\n        key: token.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }, token.name);\n    }));\n  });\n  var columns = [{\n    title: \"Token\",\n    dataIndex: \"token\"\n  }, {\n    title: \"Raw Byte Storage Capacity\",\n    dataIndex: \"rbsc\"\n  }];\n  return __jsx(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, \"What the biggest Balancer Pools are holding\"), __jsx(Table, {\n    columns: columns,\n    dataSource: tableData,\n    pagination: true,\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/studiopreza/Desktop/cadencia/cadencia/web/components/balancer.js"],"names":["gql","useQuery","NetworkStatus","Table","BALANCER_QUERY","balancerQueryVars","first","BalancerList","variables","notifyOnNetworkStatusChange","context","clientName","loading","error","data","fetchMore","networkStatus","loadingMorePosts","pools","poolsList","map","pool","index","tokens","token","id","name","columns","title","dataIndex","tableData","width"],"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,GAAT,EAAcC,QAAd,EAAwBC,aAAxB,QAA6C,gBAA7C;AACA,SAASC,KAAT,QAAsB,SAAtB;AAEA,OAAO,IAAMC,cAAc,GAAGJ,GAAH,mBAApB;AAeP,OAAO,IAAMK,iBAAiB,GAAG;AAC/BC,EAAAA,KAAK,EAAE;AADwB,CAA1B;AAIP,eAAe,SAASC,YAAT,GAAwB;AAAA;;AAAA,kBACsBN,QAAQ,CACjEG,cADiE,EAEjE;AACEI,IAAAA,SAAS,EAAEH,iBADb;AAEE;AACA;AACA;AACAI,IAAAA,2BAA2B,EAAE,IAL/B;AAMEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd;AANX,GAFiE,CAD9B;AAAA,MAC7BC,OAD6B,aAC7BA,OAD6B;AAAA,MACpBC,KADoB,aACpBA,KADoB;AAAA,MACbC,IADa,aACbA,IADa;AAAA,MACPC,SADO,aACPA,SADO;AAAA,MACIC,aADJ,aACIA,aADJ,EAarC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAIH,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACX,MAAID,OAAO,IAAI,CAACK,gBAAhB,EAAkC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AAxBG,MA0B7BC,KA1B6B,GA0BnBJ,IA1BmB,CA0B7BI,KA1B6B;AA2BrC,MAAIC,SAAS,GAAGD,KAAK,CAACE,GAAN,CAAU,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACzC,QAAIC,MAAM,GAAGF,IAAI,CAACE,MAAlB;AACA,WACE;AAAK,MAAA,GAAG,EAAED,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAUA,KAAV,CADF,EAEGC,MAAM,CAACH,GAAP,CAAW,UAACI,KAAD;AAAA,aACV;AAAG,QAAA,GAAG,EAAEA,KAAK,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmBD,KAAK,CAACE,IAAzB,CADU;AAAA,KAAX,CAFH,CADF;AAQD,GAVe,CAAhB;AAYA,MAAMC,OAAO,GAAG,CACd;AACEC,IAAAA,KAAK,EAAE,OADT;AAEEC,IAAAA,SAAS,EAAE;AAFb,GADc,EAKd;AACED,IAAAA,KAAK,EAAE,2BADT;AAEEC,IAAAA,SAAS,EAAE;AAFb,GALc,CAAhB;AAWA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDADF,EAGE,MAAC,KAAD;AACI,IAAA,OAAO,EAAEF,OADb;AAEI,IAAA,UAAU,EAAEG,SAFhB;AAGI,IAAA,UAAU,EAAE,IAHhB;AAII,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAYD","sourcesContent":["import { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { Table } from \"../antd\";\n\nexport const BALANCER_QUERY = gql`\n  query {\n    pools(first: 10, orderBy: swapsCount, orderDirection: desc) {\n      id\n      totalWeight\n      tokens {\n        id\n        name\n        symbol\n        balance\n      }\n    }\n  }\n`;\n\nexport const balancerQueryVars = {\n  first: 10,\n};\n\nexport default function BalancerList() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    BALANCER_QUERY,\n    {\n      variables: balancerQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n      context: { clientName: \"balancer\" },\n    }\n  );\n\n  // const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  // const loadMorePosts = () => {\n  //   fetchMore({\n  //     variables: {\n  //       skip: pools.length,\n  //     },\n  //   });\n  // };\n\n  if (error) return <p> Error</p>;\n  if (loading && !loadingMorePosts) return <div>Loading</div>;\n\n  const { pools } = data;\n  let poolsList = pools.map((pool, index) => {\n    let tokens = pool.tokens;\n    return (\n      <div key={index}>\n        <h1>Pool {index}</h1>\n        {tokens.map((token) => (\n          <p key={token.id}>{token.name}</p>\n        ))}\n      </div>\n    );\n  });\n\n  const columns = [\n    {\n      title: \"Token\",\n      dataIndex: \"token\",\n    },\n    {\n      title: \"Raw Byte Storage Capacity\",\n      dataIndex: \"rbsc\",\n    },\n  ];\n\n  return (\n    <section>\n      <h1>What the biggest Balancer Pools are holding</h1>\n      {/* <>{poolsList}</> */}\n      <Table\n          columns={columns}\n          dataSource={tableData}\n          pagination={true}\n          style={{ width: \"100%\" }}\n        />\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}